
stm32_to_ras_pi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc0  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004e18  08004e18  00005e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e68  08004e68  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e68  08004e68  00005e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e70  08004e70  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e70  08004e70  00005e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e74  08004e74  00005e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004e78  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08004e84  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08004e84  000060c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d07e  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c4  00000000  00000000  000130c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00014988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e1  00000000  00000000  00015278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea68  00000000  00000000  00015959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c506  00000000  00000000  000343c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0816  00000000  00000000  000408c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001010dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002478  00000000  00000000  00101120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00103598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	08004e00 	.word	0x08004e00

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	08004e00 	.word	0x08004e00

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_uldivmod>:
 80002a8:	b953      	cbnz	r3, 80002c0 <__aeabi_uldivmod+0x18>
 80002aa:	b94a      	cbnz	r2, 80002c0 <__aeabi_uldivmod+0x18>
 80002ac:	2900      	cmp	r1, #0
 80002ae:	bf08      	it	eq
 80002b0:	2800      	cmpeq	r0, #0
 80002b2:	bf1c      	itt	ne
 80002b4:	f04f 31ff 	movne.w	r1, #4294967295
 80002b8:	f04f 30ff 	movne.w	r0, #4294967295
 80002bc:	f000 b97e 	b.w	80005bc <__aeabi_idiv0>
 80002c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c8:	f000 f806 	bl	80002d8 <__udivmoddi4>
 80002cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d4:	b004      	add	sp, #16
 80002d6:	4770      	bx	lr

080002d8 <__udivmoddi4>:
 80002d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002dc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002de:	460c      	mov	r4, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14d      	bne.n	8000380 <__udivmoddi4+0xa8>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	460f      	mov	r7, r1
 80002e8:	4684      	mov	ip, r0
 80002ea:	4696      	mov	lr, r2
 80002ec:	fab2 f382 	clz	r3, r2
 80002f0:	d960      	bls.n	80003b4 <__udivmoddi4+0xdc>
 80002f2:	b14b      	cbz	r3, 8000308 <__udivmoddi4+0x30>
 80002f4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002f8:	f1c3 0220 	rsb	r2, r3, #32
 80002fc:	409f      	lsls	r7, r3
 80002fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000302:	fa20 f202 	lsr.w	r2, r0, r2
 8000306:	4317      	orrs	r7, r2
 8000308:	ea4f 461e 	mov.w	r6, lr, lsr #16
 800030c:	fa1f f48e 	uxth.w	r4, lr
 8000310:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000314:	fbb7 f1f6 	udiv	r1, r7, r6
 8000318:	fb06 7711 	mls	r7, r6, r1, r7
 800031c:	fb01 f004 	mul.w	r0, r1, r4
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	4290      	cmp	r0, r2
 8000326:	d908      	bls.n	800033a <__udivmoddi4+0x62>
 8000328:	eb1e 0202 	adds.w	r2, lr, r2
 800032c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x60>
 8000332:	4290      	cmp	r0, r2
 8000334:	f200 812d 	bhi.w	8000592 <__udivmoddi4+0x2ba>
 8000338:	4639      	mov	r1, r7
 800033a:	1a12      	subs	r2, r2, r0
 800033c:	fa1f fc8c 	uxth.w	ip, ip
 8000340:	fbb2 f0f6 	udiv	r0, r2, r6
 8000344:	fb06 2210 	mls	r2, r6, r0, r2
 8000348:	fb00 f404 	mul.w	r4, r0, r4
 800034c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000350:	4564      	cmp	r4, ip
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x8e>
 8000354:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x8c>
 800035e:	4564      	cmp	r4, ip
 8000360:	f200 811a 	bhi.w	8000598 <__udivmoddi4+0x2c0>
 8000364:	4610      	mov	r0, r2
 8000366:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036a:	ebac 0c04 	sub.w	ip, ip, r4
 800036e:	2100      	movs	r1, #0
 8000370:	b125      	cbz	r5, 800037c <__udivmoddi4+0xa4>
 8000372:	fa2c f303 	lsr.w	r3, ip, r3
 8000376:	2200      	movs	r2, #0
 8000378:	e9c5 3200 	strd	r3, r2, [r5]
 800037c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000380:	428b      	cmp	r3, r1
 8000382:	d905      	bls.n	8000390 <__udivmoddi4+0xb8>
 8000384:	b10d      	cbz	r5, 800038a <__udivmoddi4+0xb2>
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	2100      	movs	r1, #0
 800038c:	4608      	mov	r0, r1
 800038e:	e7f5      	b.n	800037c <__udivmoddi4+0xa4>
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d14d      	bne.n	8000434 <__udivmoddi4+0x15c>
 8000398:	42a3      	cmp	r3, r4
 800039a:	f0c0 80f2 	bcc.w	8000582 <__udivmoddi4+0x2aa>
 800039e:	4290      	cmp	r0, r2
 80003a0:	f080 80ef 	bcs.w	8000582 <__udivmoddi4+0x2aa>
 80003a4:	4606      	mov	r6, r0
 80003a6:	4623      	mov	r3, r4
 80003a8:	4608      	mov	r0, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0e6      	beq.n	800037c <__udivmoddi4+0xa4>
 80003ae:	e9c5 6300 	strd	r6, r3, [r5]
 80003b2:	e7e3      	b.n	800037c <__udivmoddi4+0xa4>
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	f040 80a2 	bne.w	80004fe <__udivmoddi4+0x226>
 80003ba:	1a8a      	subs	r2, r1, r2
 80003bc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003c0:	fa1f f68e 	uxth.w	r6, lr
 80003c4:	2101      	movs	r1, #1
 80003c6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ca:	fb07 2014 	mls	r0, r7, r4, r2
 80003ce:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003d6:	fb06 f004 	mul.w	r0, r6, r4
 80003da:	4290      	cmp	r0, r2
 80003dc:	d90f      	bls.n	80003fe <__udivmoddi4+0x126>
 80003de:	eb1e 0202 	adds.w	r2, lr, r2
 80003e2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003e6:	bf2c      	ite	cs
 80003e8:	f04f 0901 	movcs.w	r9, #1
 80003ec:	f04f 0900 	movcc.w	r9, #0
 80003f0:	4290      	cmp	r0, r2
 80003f2:	d903      	bls.n	80003fc <__udivmoddi4+0x124>
 80003f4:	f1b9 0f00 	cmp.w	r9, #0
 80003f8:	f000 80c8 	beq.w	800058c <__udivmoddi4+0x2b4>
 80003fc:	4644      	mov	r4, r8
 80003fe:	1a12      	subs	r2, r2, r0
 8000400:	fa1f fc8c 	uxth.w	ip, ip
 8000404:	fbb2 f0f7 	udiv	r0, r2, r7
 8000408:	fb07 2210 	mls	r2, r7, r0, r2
 800040c:	fb00 f606 	mul.w	r6, r0, r6
 8000410:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000414:	4566      	cmp	r6, ip
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x152>
 8000418:	eb1e 0c0c 	adds.w	ip, lr, ip
 800041c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x150>
 8000422:	4566      	cmp	r6, ip
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2c6>
 8000428:	4610      	mov	r0, r2
 800042a:	ebac 0c06 	sub.w	ip, ip, r6
 800042e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000432:	e79d      	b.n	8000370 <__udivmoddi4+0x98>
 8000434:	f1c1 0620 	rsb	r6, r1, #32
 8000438:	408b      	lsls	r3, r1
 800043a:	fa04 fe01 	lsl.w	lr, r4, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	fa20 fc06 	lsr.w	ip, r0, r6
 8000446:	40f4      	lsrs	r4, r6
 8000448:	408a      	lsls	r2, r1
 800044a:	431f      	orrs	r7, r3
 800044c:	ea4e 030c 	orr.w	r3, lr, ip
 8000450:	fa00 fe01 	lsl.w	lr, r0, r1
 8000454:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	fbb4 f0f8 	udiv	r0, r4, r8
 8000464:	fb08 4410 	mls	r4, r8, r0, r4
 8000468:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046c:	fb00 f90c 	mul.w	r9, r0, ip
 8000470:	45a1      	cmp	r9, r4
 8000472:	d90e      	bls.n	8000492 <__udivmoddi4+0x1ba>
 8000474:	193c      	adds	r4, r7, r4
 8000476:	f100 3aff 	add.w	sl, r0, #4294967295
 800047a:	bf2c      	ite	cs
 800047c:	f04f 0b01 	movcs.w	fp, #1
 8000480:	f04f 0b00 	movcc.w	fp, #0
 8000484:	45a1      	cmp	r9, r4
 8000486:	d903      	bls.n	8000490 <__udivmoddi4+0x1b8>
 8000488:	f1bb 0f00 	cmp.w	fp, #0
 800048c:	f000 8093 	beq.w	80005b6 <__udivmoddi4+0x2de>
 8000490:	4650      	mov	r0, sl
 8000492:	eba4 0409 	sub.w	r4, r4, r9
 8000496:	fa1f f983 	uxth.w	r9, r3
 800049a:	fbb4 f3f8 	udiv	r3, r4, r8
 800049e:	fb08 4413 	mls	r4, r8, r3, r4
 80004a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d906      	bls.n	80004bc <__udivmoddi4+0x1e4>
 80004ae:	193c      	adds	r4, r7, r4
 80004b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x1e2>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d87a      	bhi.n	80005b0 <__udivmoddi4+0x2d8>
 80004ba:	4643      	mov	r3, r8
 80004bc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c0:	eba4 040c 	sub.w	r4, r4, ip
 80004c4:	fba0 9802 	umull	r9, r8, r0, r2
 80004c8:	4544      	cmp	r4, r8
 80004ca:	46cc      	mov	ip, r9
 80004cc:	4643      	mov	r3, r8
 80004ce:	d302      	bcc.n	80004d6 <__udivmoddi4+0x1fe>
 80004d0:	d106      	bne.n	80004e0 <__udivmoddi4+0x208>
 80004d2:	45ce      	cmp	lr, r9
 80004d4:	d204      	bcs.n	80004e0 <__udivmoddi4+0x208>
 80004d6:	3801      	subs	r0, #1
 80004d8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004dc:	eb68 0307 	sbc.w	r3, r8, r7
 80004e0:	b15d      	cbz	r5, 80004fa <__udivmoddi4+0x222>
 80004e2:	ebbe 020c 	subs.w	r2, lr, ip
 80004e6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ea:	fa04 f606 	lsl.w	r6, r4, r6
 80004ee:	fa22 f301 	lsr.w	r3, r2, r1
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	431e      	orrs	r6, r3
 80004f6:	e9c5 6400 	strd	r6, r4, [r5]
 80004fa:	2100      	movs	r1, #0
 80004fc:	e73e      	b.n	800037c <__udivmoddi4+0xa4>
 80004fe:	fa02 fe03 	lsl.w	lr, r2, r3
 8000502:	f1c3 0120 	rsb	r1, r3, #32
 8000506:	fa04 f203 	lsl.w	r2, r4, r3
 800050a:	fa00 fc03 	lsl.w	ip, r0, r3
 800050e:	40cc      	lsrs	r4, r1
 8000510:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000514:	fa20 f101 	lsr.w	r1, r0, r1
 8000518:	fa1f f68e 	uxth.w	r6, lr
 800051c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000520:	430a      	orrs	r2, r1
 8000522:	fb07 4410 	mls	r4, r7, r0, r4
 8000526:	0c11      	lsrs	r1, r2, #16
 8000528:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800052c:	fb00 f406 	mul.w	r4, r0, r6
 8000530:	428c      	cmp	r4, r1
 8000532:	d90e      	bls.n	8000552 <__udivmoddi4+0x27a>
 8000534:	eb1e 0101 	adds.w	r1, lr, r1
 8000538:	f100 38ff 	add.w	r8, r0, #4294967295
 800053c:	bf2c      	ite	cs
 800053e:	f04f 0901 	movcs.w	r9, #1
 8000542:	f04f 0900 	movcc.w	r9, #0
 8000546:	428c      	cmp	r4, r1
 8000548:	d902      	bls.n	8000550 <__udivmoddi4+0x278>
 800054a:	f1b9 0f00 	cmp.w	r9, #0
 800054e:	d02c      	beq.n	80005aa <__udivmoddi4+0x2d2>
 8000550:	4640      	mov	r0, r8
 8000552:	1b09      	subs	r1, r1, r4
 8000554:	b292      	uxth	r2, r2
 8000556:	fbb1 f4f7 	udiv	r4, r1, r7
 800055a:	fb07 1114 	mls	r1, r7, r4, r1
 800055e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000562:	fb04 f106 	mul.w	r1, r4, r6
 8000566:	4291      	cmp	r1, r2
 8000568:	d907      	bls.n	800057a <__udivmoddi4+0x2a2>
 800056a:	eb1e 0202 	adds.w	r2, lr, r2
 800056e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000572:	d201      	bcs.n	8000578 <__udivmoddi4+0x2a0>
 8000574:	4291      	cmp	r1, r2
 8000576:	d815      	bhi.n	80005a4 <__udivmoddi4+0x2cc>
 8000578:	4644      	mov	r4, r8
 800057a:	1a52      	subs	r2, r2, r1
 800057c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000580:	e721      	b.n	80003c6 <__udivmoddi4+0xee>
 8000582:	1a86      	subs	r6, r0, r2
 8000584:	eb64 0303 	sbc.w	r3, r4, r3
 8000588:	2001      	movs	r0, #1
 800058a:	e70e      	b.n	80003aa <__udivmoddi4+0xd2>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e735      	b.n	80003fe <__udivmoddi4+0x126>
 8000592:	3902      	subs	r1, #2
 8000594:	4472      	add	r2, lr
 8000596:	e6d0      	b.n	800033a <__udivmoddi4+0x62>
 8000598:	44f4      	add	ip, lr
 800059a:	3802      	subs	r0, #2
 800059c:	e6e3      	b.n	8000366 <__udivmoddi4+0x8e>
 800059e:	44f4      	add	ip, lr
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x152>
 80005a4:	3c02      	subs	r4, #2
 80005a6:	4472      	add	r2, lr
 80005a8:	e7e7      	b.n	800057a <__udivmoddi4+0x2a2>
 80005aa:	3802      	subs	r0, #2
 80005ac:	4471      	add	r1, lr
 80005ae:	e7d0      	b.n	8000552 <__udivmoddi4+0x27a>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	443c      	add	r4, r7
 80005b4:	e782      	b.n	80004bc <__udivmoddi4+0x1e4>
 80005b6:	3802      	subs	r0, #2
 80005b8:	443c      	add	r4, r7
 80005ba:	e76a      	b.n	8000492 <__udivmoddi4+0x1ba>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fa69 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f81f 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f8c9 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 f87b 	bl	80006cc <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char msg[] = "Imansha Manuka\n";
 80005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <main+0x44>)
 80005d8:	463c      	mov	r4, r7
 80005da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 80005e0:	463b      	mov	r3, r7
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fe58 	bl	8000298 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4639      	mov	r1, r7
 80005ee:	2364      	movs	r3, #100	@ 0x64
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <main+0x48>)
 80005f2:	f003 fe9b 	bl	800432c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005fa:	f000 fb0d 	bl	8000c18 <HAL_Delay>
  {
 80005fe:	bf00      	nop
 8000600:	e7e9      	b.n	80005d6 <main+0x16>
 8000602:	bf00      	nop
 8000604:	08004e18 	.word	0x08004e18
 8000608:	20000028 	.word	0x20000028

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b09c      	sub	sp, #112	@ 0x70
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2250      	movs	r2, #80	@ 0x50
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fbc4 	bl	8004da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
 8000630:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000632:	4b24      	ldr	r3, [pc, #144]	@ (80006c4 <SystemClock_Config+0xb8>)
 8000634:	691b      	ldr	r3, [r3, #16]
 8000636:	4a23      	ldr	r2, [pc, #140]	@ (80006c4 <SystemClock_Config+0xb8>)
 8000638:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800063c:	6113      	str	r3, [r2, #16]
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <SystemClock_Config+0xb8>)
 8000640:	691b      	ldr	r3, [r3, #16]
 8000642:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800064a:	bf00      	nop
 800064c:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <SystemClock_Config+0xb8>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	f003 0308 	and.w	r3, r3, #8
 8000654:	2b08      	cmp	r3, #8
 8000656:	d1f9      	bne.n	800064c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000660:	2308      	movs	r3, #8
 8000662:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2340      	movs	r3, #64	@ 0x40
 8000666:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fdc3 	bl	80011fc <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800067c:	f000 f8b8 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	231f      	movs	r3, #31
 8000682:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2101      	movs	r1, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f9e4 	bl	8001a6c <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006aa:	f000 f8a1 	bl	80007f0 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <SystemClock_Config+0xbc>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a05      	ldr	r2, [pc, #20]	@ (80006c8 <SystemClock_Config+0xbc>)
 80006b4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80006b8:	6013      	str	r3, [r2, #0]
}
 80006ba:	bf00      	nop
 80006bc:	3770      	adds	r7, #112	@ 0x70
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	44020800 	.word	0x44020800
 80006c8:	40022000 	.word	0x40022000

080006cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d0:	4b22      	ldr	r3, [pc, #136]	@ (800075c <MX_USART2_UART_Init+0x90>)
 80006d2:	4a23      	ldr	r2, [pc, #140]	@ (8000760 <MX_USART2_UART_Init+0x94>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d6:	4b21      	ldr	r3, [pc, #132]	@ (800075c <MX_USART2_UART_Init+0x90>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <MX_USART2_UART_Init+0x90>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <MX_USART2_UART_Init+0x90>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <MX_USART2_UART_Init+0x90>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <MX_USART2_UART_Init+0x90>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <MX_USART2_UART_Init+0x90>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <MX_USART2_UART_Init+0x90>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <MX_USART2_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000708:	4b14      	ldr	r3, [pc, #80]	@ (800075c <MX_USART2_UART_Init+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <MX_USART2_UART_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000714:	4811      	ldr	r0, [pc, #68]	@ (800075c <MX_USART2_UART_Init+0x90>)
 8000716:	f003 fdb9 	bl	800428c <HAL_UART_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000720:	f000 f866 	bl	80007f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000724:	2100      	movs	r1, #0
 8000726:	480d      	ldr	r0, [pc, #52]	@ (800075c <MX_USART2_UART_Init+0x90>)
 8000728:	f004 fa74 	bl	8004c14 <HAL_UARTEx_SetTxFifoThreshold>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000732:	f000 f85d 	bl	80007f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	4808      	ldr	r0, [pc, #32]	@ (800075c <MX_USART2_UART_Init+0x90>)
 800073a:	f004 faa9 	bl	8004c90 <HAL_UARTEx_SetRxFifoThreshold>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000744:	f000 f854 	bl	80007f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_USART2_UART_Init+0x90>)
 800074a:	f004 fa2a 	bl	8004ba2 <HAL_UARTEx_DisableFifoMode>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000754:	f000 f84c 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000028 	.word	0x20000028
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <MX_GPIO_Init+0x84>)
 800077c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000780:	4a19      	ldr	r2, [pc, #100]	@ (80007e8 <MX_GPIO_Init+0x84>)
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <MX_GPIO_Init+0x84>)
 800078c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000790:	f003 0304 	and.w	r3, r3, #4
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_GPIO_Init+0x84>)
 800079a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <MX_GPIO_Init+0x84>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_GPIO_Init+0x84>)
 80007aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007bc:	480b      	ldr	r0, [pc, #44]	@ (80007ec <MX_GPIO_Init+0x88>)
 80007be:	f000 fd05 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_GPIO_Init+0x88>)
 80007dc:	f000 fba4 	bl	8000f28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	44020c00 	.word	0x44020c00
 80007ec:	42020800 	.word	0x42020800

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <Error_Handler+0x8>

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b0ac      	sub	sp, #176	@ 0xb0
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	2288      	movs	r2, #136	@ 0x88
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f004 fabb 	bl	8004da8 <memset>
  if(huart->Instance==USART2)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a30      	ldr	r2, [pc, #192]	@ (80008f8 <HAL_UART_MspInit+0xec>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d159      	bne.n	80008f0 <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800083c:	f04f 0202 	mov.w	r2, #2
 8000840:	f04f 0300 	mov.w	r3, #0
 8000844:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000848:	2300      	movs	r3, #0
 800084a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fc4d 	bl	80020f0 <HAL_RCCEx_PeriphCLKConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800085c:	f7ff ffc8 	bl	80007f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000860:	4b26      	ldr	r3, [pc, #152]	@ (80008fc <HAL_UART_MspInit+0xf0>)
 8000862:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000866:	4a25      	ldr	r2, [pc, #148]	@ (80008fc <HAL_UART_MspInit+0xf0>)
 8000868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800086c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000870:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <HAL_UART_MspInit+0xf0>)
 8000872:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <HAL_UART_MspInit+0xf0>)
 8000880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000884:	4a1d      	ldr	r2, [pc, #116]	@ (80008fc <HAL_UART_MspInit+0xf0>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800088e:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <HAL_UART_MspInit+0xf0>)
 8000890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800089c:	2308      	movs	r3, #8
 800089e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b4:	2307      	movs	r3, #7
 80008b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008be:	4619      	mov	r1, r3
 80008c0:	480f      	ldr	r0, [pc, #60]	@ (8000900 <HAL_UART_MspInit+0xf4>)
 80008c2:	f000 fb31 	bl	8000f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008c6:	2320      	movs	r3, #32
 80008c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_USART2;
 80008de:	2309      	movs	r3, #9
 80008e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008e8:	4619      	mov	r1, r3
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <HAL_UART_MspInit+0xf4>)
 80008ec:	f000 fb1c 	bl	8000f28 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008f0:	bf00      	nop
 80008f2:	37b0      	adds	r7, #176	@ 0xb0
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40004400 	.word	0x40004400
 80008fc:	44020c00 	.word	0x44020c00
 8000900:	42020000 	.word	0x42020000

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <NMI_Handler+0x4>

0800090c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <MemManage_Handler+0x4>

0800091c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <UsageFault_Handler+0x4>

0800092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095a:	f000 f93d 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800096a:	4b30      	ldr	r3, [pc, #192]	@ (8000a2c <SystemInit+0xc8>)
 800096c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000970:	4a2e      	ldr	r2, [pc, #184]	@ (8000a2c <SystemInit+0xc8>)
 8000972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000976:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800097a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a30 <SystemInit+0xcc>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <SystemInit+0xcc>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000986:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <SystemInit+0xcc>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800098c:	4b28      	ldr	r3, [pc, #160]	@ (8000a30 <SystemInit+0xcc>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4927      	ldr	r1, [pc, #156]	@ (8000a30 <SystemInit+0xcc>)
 8000992:	4b28      	ldr	r3, [pc, #160]	@ (8000a34 <SystemInit+0xd0>)
 8000994:	4013      	ands	r3, r2
 8000996:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000998:	4b25      	ldr	r3, [pc, #148]	@ (8000a30 <SystemInit+0xcc>)
 800099a:	2200      	movs	r2, #0
 800099c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800099e:	4b24      	ldr	r3, [pc, #144]	@ (8000a30 <SystemInit+0xcc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80009a4:	4b22      	ldr	r3, [pc, #136]	@ (8000a30 <SystemInit+0xcc>)
 80009a6:	4a24      	ldr	r2, [pc, #144]	@ (8000a38 <SystemInit+0xd4>)
 80009a8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80009aa:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <SystemInit+0xcc>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <SystemInit+0xcc>)
 80009b2:	4a21      	ldr	r2, [pc, #132]	@ (8000a38 <SystemInit+0xd4>)
 80009b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <SystemInit+0xcc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80009bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <SystemInit+0xcc>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a30 <SystemInit+0xcc>)
 80009c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80009c8:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <SystemInit+0xcc>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <SystemInit+0xc8>)
 80009d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80009d4:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80009d6:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <SystemInit+0xd8>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80009de:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80009e6:	d003      	beq.n	80009f0 <SystemInit+0x8c>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80009ee:	d117      	bne.n	8000a20 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <SystemInit+0xd8>)
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d005      	beq.n	8000a08 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <SystemInit+0xd8>)
 80009fe:	4a10      	ldr	r2, [pc, #64]	@ (8000a40 <SystemInit+0xdc>)
 8000a00:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <SystemInit+0xd8>)
 8000a04:	4a0f      	ldr	r2, [pc, #60]	@ (8000a44 <SystemInit+0xe0>)
 8000a06:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <SystemInit+0xd8>)
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a3c <SystemInit+0xd8>)
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <SystemInit+0xd8>)
 8000a16:	69db      	ldr	r3, [r3, #28]
 8000a18:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <SystemInit+0xd8>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	61d3      	str	r3, [r2, #28]
  }
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00
 8000a30:	44020c00 	.word	0x44020c00
 8000a34:	fae2eae3 	.word	0xfae2eae3
 8000a38:	01010280 	.word	0x01010280
 8000a3c:	40022000 	.word	0x40022000
 8000a40:	08192a3b 	.word	0x08192a3b
 8000a44:	4c5d6e7f 	.word	0x4c5d6e7f

08000a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000a48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a4e:	e003      	b.n	8000a58 <LoopCopyDataInit>

08000a50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a56:	3104      	adds	r1, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a58:	480b      	ldr	r0, [pc, #44]	@ (8000a88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a60:	d3f6      	bcc.n	8000a50 <CopyDataInit>
	ldr	r2, =_sbss
 8000a62:	4a0b      	ldr	r2, [pc, #44]	@ (8000a90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a64:	e002      	b.n	8000a6c <LoopFillZerobss>

08000a66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a68:	f842 3b04 	str.w	r3, [r2], #4

08000a6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <LoopForever+0x16>)
	cmp	r2, r3
 8000a6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a70:	d3f9      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a72:	f7ff ff77 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a76:	f004 f99f 	bl	8004db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a7a:	f7ff fda1 	bl	80005c0 <main>

08000a7e <LoopForever>:

LoopForever:
    b LoopForever
 8000a7e:	e7fe      	b.n	8000a7e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000a80:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000a84:	08004e78 	.word	0x08004e78
	ldr	r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a8c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a90:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a94:	200000c0 	.word	0x200000c0

08000a98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC1_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f96c 	bl	8000d7e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000aa6:	f001 f999 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <HAL_Init+0x44>)
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	f003 030f 	and.w	r3, r3, #15
 8000ab4:	490b      	ldr	r1, [pc, #44]	@ (8000ae4 <HAL_Init+0x48>)
 8000ab6:	5ccb      	ldrb	r3, [r1, r3]
 8000ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8000abc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <HAL_Init+0x4c>)
 8000abe:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000ac0:	2004      	movs	r0, #4
 8000ac2:	f000 f9a3 	bl	8000e0c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f810 	bl	8000aec <HAL_InitTick>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e002      	b.n	8000adc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad6:	f7ff fe91 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	44020c00 	.word	0x44020c00
 8000ae4:	08004e28 	.word	0x08004e28
 8000ae8:	20000000 	.word	0x20000000

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000af8:	4b33      	ldr	r3, [pc, #204]	@ (8000bc8 <HAL_InitTick+0xdc>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e05c      	b.n	8000bbe <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000b04:	4b31      	ldr	r3, [pc, #196]	@ (8000bcc <HAL_InitTick+0xe0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d10c      	bne.n	8000b2a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000b10:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd0 <HAL_InitTick+0xe4>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc8 <HAL_InitTick+0xdc>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	e037      	b.n	8000b9a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000b2a:	f000 f9c7 	bl	8000ebc <HAL_SYSTICK_GetCLKSourceConfig>
 8000b2e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d023      	beq.n	8000b7e <HAL_InitTick+0x92>
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d82d      	bhi.n	8000b98 <HAL_InitTick+0xac>
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <HAL_InitTick+0x5e>
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d00d      	beq.n	8000b64 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000b48:	e026      	b.n	8000b98 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000b4a:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <HAL_InitTick+0xe4>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc8 <HAL_InitTick+0xdc>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	4619      	mov	r1, r3
 8000b54:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000b58:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b60:	60fb      	str	r3, [r7, #12]
        break;
 8000b62:	e01a      	b.n	8000b9a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b64:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <HAL_InitTick+0xdc>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b72:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7a:	60fb      	str	r3, [r7, #12]
        break;
 8000b7c:	e00d      	b.n	8000b9a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b7e:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_InitTick+0xdc>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b94:	60fb      	str	r3, [r7, #12]
        break;
 8000b96:	e000      	b.n	8000b9a <HAL_InitTick+0xae>
        break;
 8000b98:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f000 f914 	bl	8000dc8 <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e009      	b.n	8000bbe <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000baa:	2200      	movs	r2, #0
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb2:	f000 f8ef 	bl	8000d94 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000bb6:	4a07      	ldr	r2, [pc, #28]	@ (8000bd4 <HAL_InitTick+0xe8>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	e000e010 	.word	0xe000e010
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	200000bc 	.word	0x200000bc

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b03      	ldr	r3, [pc, #12]	@ (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	200000bc 	.word	0x200000bc

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff ffee 	bl	8000c00 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffde 	bl	8000c00 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	@ (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	@ (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	@ 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	@ 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ff6a 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da2:	f7ff ff81 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000da6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	6978      	ldr	r0, [r7, #20]
 8000dae:	f7ff ffb3 	bl	8000d18 <NVIC_EncodePriority>
 8000db2:	4602      	mov	r2, r0
 8000db4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff82 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000dc0:	bf00      	nop
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00d      	b.n	8000dfa <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <HAL_SYSTICK_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <HAL_SYSTICK_Config+0x40>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_SYSTICK_Config+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <HAL_SYSTICK_Config+0x40>)
 8000df2:	f043 0303 	orr.w	r3, r3, #3
 8000df6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d844      	bhi.n	8000ea4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e20 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e20:	08000e43 	.word	0x08000e43
 8000e24:	08000e61 	.word	0x08000e61
 8000e28:	08000e83 	.word	0x08000e83
 8000e2c:	08000ea5 	.word	0x08000ea5
 8000e30:	08000e35 	.word	0x08000e35
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e34:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6013      	str	r3, [r2, #0]
      break;
 8000e40:	e031      	b.n	8000ea6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e48:	f023 0304 	bic.w	r3, r3, #4
 8000e4c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000e54:	4a18      	ldr	r2, [pc, #96]	@ (8000eb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e56:	f023 030c 	bic.w	r3, r3, #12
 8000e5a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000e5e:	e022      	b.n	8000ea6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a13      	ldr	r2, [pc, #76]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e66:	f023 0304 	bic.w	r3, r3, #4
 8000e6a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000e72:	f023 030c 	bic.w	r3, r3, #12
 8000e76:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000e80:	e011      	b.n	8000ea6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e82:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e88:	f023 0304 	bic.w	r3, r3, #4
 8000e8c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000e94:	f023 030c 	bic.w	r3, r3, #12
 8000e98:	4a07      	ldr	r2, [pc, #28]	@ (8000eb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000ea2:	e000      	b.n	8000ea6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000ea4:	bf00      	nop
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010
 8000eb8:	44020c00 	.word	0x44020c00

08000ebc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000ec2:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	e01e      	b.n	8000f12 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000ed4:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000ed6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d00f      	beq.n	8000f06 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d80f      	bhi.n	8000f0c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d003      	beq.n	8000f00 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000ef8:	e008      	b.n	8000f0c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
        break;
 8000efe:	e008      	b.n	8000f12 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000f00:	2301      	movs	r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
        break;
 8000f04:	e005      	b.n	8000f12 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000f06:	2302      	movs	r3, #2
 8000f08:	607b      	str	r3, [r7, #4]
        break;
 8000f0a:	e002      	b.n	8000f12 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
        break;
 8000f10:	bf00      	nop
    }
  }
  return systick_source;
 8000f12:	687b      	ldr	r3, [r7, #4]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e010 	.word	0xe000e010
 8000f24:	44020c00 	.word	0x44020c00

08000f28 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f36:	e136      	b.n	80011a6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8128 	beq.w	80011a0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x38>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b12      	cmp	r3, #18
 8000f5e:	d125      	bne.n	8000fac <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	f003 020f 	and.w	r2, r3, #15
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	6979      	ldr	r1, [r7, #20]
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0203 	and.w	r2, r3, #3
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d00b      	beq.n	8001000 <HAL_GPIO_Init+0xd8>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d007      	beq.n	8001000 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff4:	2b11      	cmp	r3, #17
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b12      	cmp	r3, #18
 8000ffe:	d130      	bne.n	8001062 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4013      	ands	r3, r2
 8001016:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	4313      	orrs	r3, r2
 8001028:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001036:	2201      	movs	r2, #1
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	4013      	ands	r3, r2
 8001044:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	f003 0201 	and.w	r2, r3, #1
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	4313      	orrs	r3, r2
 800105a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b03      	cmp	r3, #3
 8001068:	d017      	beq.n	800109a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	4013      	ands	r3, r2
 8001080:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4313      	orrs	r3, r2
 8001092:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d07c      	beq.n	80011a0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80010a6:	4a47      	ldr	r2, [pc, #284]	@ (80011c4 <HAL_GPIO_Init+0x29c>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3318      	adds	r3, #24
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	4013      	ands	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	0a9a      	lsrs	r2, r3, #10
 80010ce:	4b3e      	ldr	r3, [pc, #248]	@ (80011c8 <HAL_GPIO_Init+0x2a0>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	f002 0203 	and.w	r2, r2, #3
 80010d8:	00d2      	lsls	r2, r2, #3
 80010da:	4093      	lsls	r3, r2
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	4313      	orrs	r3, r2
 80010e0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80010e2:	4938      	ldr	r1, [pc, #224]	@ (80011c4 <HAL_GPIO_Init+0x29c>)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3318      	adds	r3, #24
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80010f0:	4b34      	ldr	r3, [pc, #208]	@ (80011c4 <HAL_GPIO_Init+0x29c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001114:	4a2b      	ldr	r2, [pc, #172]	@ (80011c4 <HAL_GPIO_Init+0x29c>)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800111a:	4b2a      	ldr	r3, [pc, #168]	@ (80011c4 <HAL_GPIO_Init+0x29c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	4013      	ands	r3, r2
 8001128:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800113e:	4a21      	ldr	r2, [pc, #132]	@ (80011c4 <HAL_GPIO_Init+0x29c>)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001144:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <HAL_GPIO_Init+0x29c>)
 8001146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800114a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	4013      	ands	r3, r2
 8001154:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800116a:	4a16      	ldr	r2, [pc, #88]	@ (80011c4 <HAL_GPIO_Init+0x29c>)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <HAL_GPIO_Init+0x29c>)
 8001174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001178:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43db      	mvns	r3, r3
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4013      	ands	r3, r2
 8001182:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001198:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <HAL_GPIO_Init+0x29c>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	3301      	adds	r3, #1
 80011a4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f47f aec1 	bne.w	8000f38 <HAL_GPIO_Init+0x10>
  }
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	44022000 	.word	0x44022000
 80011c8:	002f7f7f 	.word	0x002f7f7f

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	f000 bc28 	b.w	8001a60 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001210:	4b94      	ldr	r3, [pc, #592]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	f003 0318 	and.w	r3, r3, #24
 8001218:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800121a:	4b92      	ldr	r3, [pc, #584]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 800121c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	2b00      	cmp	r3, #0
 800122e:	d05b      	beq.n	80012e8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	2b08      	cmp	r3, #8
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x46>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	2b18      	cmp	r3, #24
 800123a:	d114      	bne.n	8001266 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d111      	bne.n	8001266 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	f000 bc08 	b.w	8001a60 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001250:	4b84      	ldr	r3, [pc, #528]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	041b      	lsls	r3, r3, #16
 800125e:	4981      	ldr	r1, [pc, #516]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001260:	4313      	orrs	r3, r2
 8001262:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001264:	e040      	b.n	80012e8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d023      	beq.n	80012b6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800126e:	4b7d      	ldr	r3, [pc, #500]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a7c      	ldr	r2, [pc, #496]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127a:	f7ff fcc1 	bl	8000c00 <HAL_GetTick>
 800127e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001282:	f7ff fcbd 	bl	8000c00 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e3e5      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001294:	4b73      	ldr	r3, [pc, #460]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80012a0:	4b70      	ldr	r3, [pc, #448]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	496d      	ldr	r1, [pc, #436]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	618b      	str	r3, [r1, #24]
 80012b4:	e018      	b.n	80012e8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80012b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6a      	ldr	r2, [pc, #424]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80012bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c2:	f7ff fc9d 	bl	8000c00 <HAL_GetTick>
 80012c6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80012ca:	f7ff fc99 	bl	8000c00 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e3c1      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80012dc:	4b61      	ldr	r3, [pc, #388]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f0      	bne.n	80012ca <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80a0 	beq.w	8001436 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	2b10      	cmp	r3, #16
 80012fa:	d005      	beq.n	8001308 <HAL_RCC_OscConfig+0x10c>
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b18      	cmp	r3, #24
 8001300:	d109      	bne.n	8001316 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f040 8092 	bne.w	8001436 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e3a4      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800131e:	d106      	bne.n	800132e <HAL_RCC_OscConfig+0x132>
 8001320:	4b50      	ldr	r3, [pc, #320]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a4f      	ldr	r2, [pc, #316]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e058      	b.n	80013e0 <HAL_RCC_OscConfig+0x1e4>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d112      	bne.n	800135c <HAL_RCC_OscConfig+0x160>
 8001336:	4b4b      	ldr	r3, [pc, #300]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a4a      	ldr	r2, [pc, #296]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 800133c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b48      	ldr	r3, [pc, #288]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a47      	ldr	r2, [pc, #284]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001348:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b45      	ldr	r3, [pc, #276]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a44      	ldr	r2, [pc, #272]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001354:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e041      	b.n	80013e0 <HAL_RCC_OscConfig+0x1e4>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001364:	d112      	bne.n	800138c <HAL_RCC_OscConfig+0x190>
 8001366:	4b3f      	ldr	r3, [pc, #252]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a3e      	ldr	r2, [pc, #248]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 800136c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b3c      	ldr	r3, [pc, #240]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a3b      	ldr	r2, [pc, #236]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001378:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b39      	ldr	r3, [pc, #228]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a38      	ldr	r2, [pc, #224]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e029      	b.n	80013e0 <HAL_RCC_OscConfig+0x1e4>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001394:	d112      	bne.n	80013bc <HAL_RCC_OscConfig+0x1c0>
 8001396:	4b33      	ldr	r3, [pc, #204]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a32      	ldr	r2, [pc, #200]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b30      	ldr	r3, [pc, #192]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80013a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80013b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e011      	b.n	80013e0 <HAL_RCC_OscConfig+0x1e4>
 80013bc:	4b29      	ldr	r3, [pc, #164]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a28      	ldr	r2, [pc, #160]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80013c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a25      	ldr	r2, [pc, #148]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80013ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a22      	ldr	r2, [pc, #136]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 80013da:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80013de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc0a 	bl	8000c00 <HAL_GetTick>
 80013ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fc06 	bl	8000c00 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	@ 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e32e      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x1f4>
 800140e:	e012      	b.n	8001436 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fbf6 	bl	8000c00 <HAL_GetTick>
 8001414:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001418:	f7ff fbf2 	bl	8000c00 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	@ 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e31a      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <HAL_RCC_OscConfig+0x268>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 809a 	beq.w	8001578 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x25a>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	2b18      	cmp	r3, #24
 800144e:	d149      	bne.n	80014e4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d146      	bne.n	80014e4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d104      	bne.n	8001468 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e2fe      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
 8001462:	bf00      	nop
 8001464:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d11c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800146e:	4b9a      	ldr	r3, [pc, #616]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0218 	and.w	r2, r3, #24
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	429a      	cmp	r2, r3
 800147c:	d014      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800147e:	4b96      	ldr	r3, [pc, #600]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 0218 	bic.w	r2, r3, #24
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	4993      	ldr	r1, [pc, #588]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001490:	f000 fdd0 	bl	8002034 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001494:	4b91      	ldr	r3, [pc, #580]	@ (80016dc <HAL_RCC_OscConfig+0x4e0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fb27 	bl	8000aec <HAL_InitTick>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e2db      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fbaa 	bl	8000c00 <HAL_GetTick>
 80014ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80014b0:	f7ff fba6 	bl	8000c00 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e2ce      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c2:	4b85      	ldr	r3, [pc, #532]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80014ce:	4b82      	ldr	r3, [pc, #520]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	497e      	ldr	r1, [pc, #504]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80014e2:	e049      	b.n	8001578 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d02c      	beq.n	8001546 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80014ec:	4b7a      	ldr	r3, [pc, #488]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 0218 	bic.w	r2, r3, #24
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	4977      	ldr	r1, [pc, #476]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80014fe:	4b76      	ldr	r3, [pc, #472]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a75      	ldr	r2, [pc, #468]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150a:	f7ff fb79 	bl	8000c00 <HAL_GetTick>
 800150e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001512:	f7ff fb75 	bl	8000c00 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e29d      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001524:	4b6c      	ldr	r3, [pc, #432]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001530:	4b69      	ldr	r3, [pc, #420]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	041b      	lsls	r3, r3, #16
 800153e:	4966      	ldr	r1, [pc, #408]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 8001540:	4313      	orrs	r3, r2
 8001542:	610b      	str	r3, [r1, #16]
 8001544:	e018      	b.n	8001578 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001546:	4b64      	ldr	r3, [pc, #400]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a63      	ldr	r2, [pc, #396]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fb55 	bl	8000c00 <HAL_GetTick>
 8001556:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800155a:	f7ff fb51 	bl	8000c00 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e279      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800156c:	4b5a      	ldr	r3, [pc, #360]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f0      	bne.n	800155a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d03c      	beq.n	80015fe <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d01c      	beq.n	80015c6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158c:	4b52      	ldr	r3, [pc, #328]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 800158e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001592:	4a51      	ldr	r2, [pc, #324]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 8001594:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001598:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff fb30 	bl	8000c00 <HAL_GetTick>
 80015a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fb2c 	bl	8000c00 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e254      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80015b6:	4b48      	ldr	r3, [pc, #288]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80015b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0ef      	beq.n	80015a4 <HAL_RCC_OscConfig+0x3a8>
 80015c4:	e01b      	b.n	80015fe <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c6:	4b44      	ldr	r3, [pc, #272]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80015c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015cc:	4a42      	ldr	r2, [pc, #264]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80015ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80015d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d6:	f7ff fb13 	bl	8000c00 <HAL_GetTick>
 80015da:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80015de:	f7ff fb0f 	bl	8000c00 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e237      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80015f0:	4b39      	ldr	r3, [pc, #228]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80015f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1ef      	bne.n	80015de <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 80d2 	beq.w	80017b0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800160c:	4b34      	ldr	r3, [pc, #208]	@ (80016e0 <HAL_RCC_OscConfig+0x4e4>)
 800160e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d118      	bne.n	800164a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001618:	4b31      	ldr	r3, [pc, #196]	@ (80016e0 <HAL_RCC_OscConfig+0x4e4>)
 800161a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161c:	4a30      	ldr	r2, [pc, #192]	@ (80016e0 <HAL_RCC_OscConfig+0x4e4>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001624:	f7ff faec 	bl	8000c00 <HAL_GetTick>
 8001628:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162c:	f7ff fae8 	bl	8000c00 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e210      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800163e:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <HAL_RCC_OscConfig+0x4e4>)
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_RCC_OscConfig+0x468>
 8001652:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 8001654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001658:	4a1f      	ldr	r2, [pc, #124]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001662:	e074      	b.n	800174e <HAL_RCC_OscConfig+0x552>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d118      	bne.n	800169e <HAL_RCC_OscConfig+0x4a2>
 800166c:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 800166e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001672:	4a19      	ldr	r2, [pc, #100]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800167c:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 800167e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001682:	4a15      	ldr	r2, [pc, #84]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 8001684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001688:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 800168e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001692:	4a11      	ldr	r2, [pc, #68]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 8001694:	f023 0304 	bic.w	r3, r3, #4
 8001698:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800169c:	e057      	b.n	800174e <HAL_RCC_OscConfig+0x552>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d11e      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4e8>
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80016a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016ac:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80016b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016bc:	4a06      	ldr	r2, [pc, #24]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80016be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016c6:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80016c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016cc:	4a02      	ldr	r2, [pc, #8]	@ (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016d6:	e03a      	b.n	800174e <HAL_RCC_OscConfig+0x552>
 80016d8:	44020c00 	.word	0x44020c00
 80016dc:	20000004 	.word	0x20000004
 80016e0:	44020800 	.word	0x44020800
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b85      	cmp	r3, #133	@ 0x85
 80016ea:	d118      	bne.n	800171e <HAL_RCC_OscConfig+0x522>
 80016ec:	4ba2      	ldr	r3, [pc, #648]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80016ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016f2:	4aa1      	ldr	r2, [pc, #644]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016fc:	4b9e      	ldr	r3, [pc, #632]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80016fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001702:	4a9d      	ldr	r2, [pc, #628]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001708:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800170c:	4b9a      	ldr	r3, [pc, #616]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 800170e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001712:	4a99      	ldr	r2, [pc, #612]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800171c:	e017      	b.n	800174e <HAL_RCC_OscConfig+0x552>
 800171e:	4b96      	ldr	r3, [pc, #600]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001724:	4a94      	ldr	r2, [pc, #592]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800172e:	4b92      	ldr	r3, [pc, #584]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001734:	4a90      	ldr	r2, [pc, #576]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001736:	f023 0304 	bic.w	r3, r3, #4
 800173a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800173e:	4b8e      	ldr	r3, [pc, #568]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001744:	4a8c      	ldr	r2, [pc, #560]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800174a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d016      	beq.n	8001784 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001756:	f7ff fa53 	bl	8000c00 <HAL_GetTick>
 800175a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7ff fa4f 	bl	8000c00 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e175      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001774:	4b80      	ldr	r3, [pc, #512]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0ed      	beq.n	800175e <HAL_RCC_OscConfig+0x562>
 8001782:	e015      	b.n	80017b0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff fa3c 	bl	8000c00 <HAL_GetTick>
 8001788:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7ff fa38 	bl	8000c00 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e15e      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a2:	4b75      	ldr	r3, [pc, #468]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80017a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ed      	bne.n	800178c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d036      	beq.n	800182a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d019      	beq.n	80017f8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a6b      	ldr	r2, [pc, #428]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80017ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fa16 	bl	8000c00 <HAL_GetTick>
 80017d4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80017d8:	f7ff fa12 	bl	8000c00 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e13a      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80017ea:	4b63      	ldr	r3, [pc, #396]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x5dc>
 80017f6:	e018      	b.n	800182a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a5e      	ldr	r2, [pc, #376]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80017fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001802:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff f9fc 	bl	8000c00 <HAL_GetTick>
 8001808:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800180c:	f7ff f9f8 	bl	8000c00 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e120      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800181e:	4b56      	ldr	r3, [pc, #344]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8115 	beq.w	8001a5e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	2b18      	cmp	r3, #24
 8001838:	f000 80af 	beq.w	800199a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001840:	2b02      	cmp	r3, #2
 8001842:	f040 8086 	bne.w	8001952 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001846:	4b4c      	ldr	r3, [pc, #304]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a4b      	ldr	r2, [pc, #300]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 800184c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff f9d5 	bl	8000c00 <HAL_GetTick>
 8001856:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800185a:	f7ff f9d1 	bl	8000c00 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e0f9      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800186c:	4b42      	ldr	r3, [pc, #264]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001878:	4b3f      	ldr	r3, [pc, #252]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 800187a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001880:	f023 0303 	bic.w	r3, r3, #3
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800188c:	0212      	lsls	r2, r2, #8
 800188e:	430a      	orrs	r2, r1
 8001890:	4939      	ldr	r1, [pc, #228]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001892:	4313      	orrs	r3, r2
 8001894:	628b      	str	r3, [r1, #40]	@ 0x28
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189a:	3b01      	subs	r3, #1
 800189c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a4:	3b01      	subs	r3, #1
 80018a6:	025b      	lsls	r3, r3, #9
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018b0:	3b01      	subs	r3, #1
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	3b01      	subs	r3, #1
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80018c6:	492c      	ldr	r1, [pc, #176]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80018cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80018ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d0:	4a29      	ldr	r2, [pc, #164]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80018d2:	f023 0310 	bic.w	r3, r3, #16
 80018d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018dc:	4a26      	ldr	r2, [pc, #152]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80018e2:	4b25      	ldr	r3, [pc, #148]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80018e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e6:	4a24      	ldr	r2, [pc, #144]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80018e8:	f043 0310 	orr.w	r3, r3, #16
 80018ec:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80018ee:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80018f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f2:	f023 020c 	bic.w	r2, r3, #12
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	491f      	ldr	r1, [pc, #124]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001900:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	f023 0220 	bic.w	r2, r3, #32
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800190c:	491a      	ldr	r1, [pc, #104]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 800190e:	4313      	orrs	r3, r2
 8001910:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001912:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001916:	4a18      	ldr	r2, [pc, #96]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800191c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a15      	ldr	r2, [pc, #84]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001924:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7ff f969 	bl	8000c00 <HAL_GetTick>
 800192e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001932:	f7ff f965 	bl	8000c00 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e08d      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x736>
 8001950:	e085      	b.n	8001a5e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a08      	ldr	r2, [pc, #32]	@ (8001978 <HAL_RCC_OscConfig+0x77c>)
 8001958:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800195c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff f94f 	bl	8000c00 <HAL_GetTick>
 8001962:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001966:	f7ff f94b 	bl	8000c00 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d903      	bls.n	800197c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e073      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
 8001978:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800197c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a68 <HAL_RCC_OscConfig+0x86c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ee      	bne.n	8001966 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001988:	4b37      	ldr	r3, [pc, #220]	@ (8001a68 <HAL_RCC_OscConfig+0x86c>)
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	4a36      	ldr	r2, [pc, #216]	@ (8001a68 <HAL_RCC_OscConfig+0x86c>)
 800198e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001992:	f023 0303 	bic.w	r3, r3, #3
 8001996:	6293      	str	r3, [r2, #40]	@ 0x28
 8001998:	e061      	b.n	8001a5e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800199a:	4b33      	ldr	r3, [pc, #204]	@ (8001a68 <HAL_RCC_OscConfig+0x86c>)
 800199c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019a0:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <HAL_RCC_OscConfig+0x86c>)
 80019a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d031      	beq.n	8001a12 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f003 0203 	and.w	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d12a      	bne.n	8001a12 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d122      	bne.n	8001a12 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d11a      	bne.n	8001a12 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	0a5b      	lsrs	r3, r3, #9
 80019e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d111      	bne.n	8001a12 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	0c1b      	lsrs	r3, r3, #16
 80019f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019fa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d108      	bne.n	8001a12 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	0e1b      	lsrs	r3, r3, #24
 8001a04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e024      	b.n	8001a60 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001a16:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <HAL_RCC_OscConfig+0x86c>)
 8001a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a1a:	08db      	lsrs	r3, r3, #3
 8001a1c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d01a      	beq.n	8001a5e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001a28:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <HAL_RCC_OscConfig+0x86c>)
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a68 <HAL_RCC_OscConfig+0x86c>)
 8001a2e:	f023 0310 	bic.w	r3, r3, #16
 8001a32:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff f8e4 	bl	8000c00 <HAL_GetTick>
 8001a38:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001a3a:	bf00      	nop
 8001a3c:	f7ff f8e0 	bl	8000c00 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d0f9      	beq.n	8001a3c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4c:	4a06      	ldr	r2, [pc, #24]	@ (8001a68 <HAL_RCC_OscConfig+0x86c>)
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001a52:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <HAL_RCC_OscConfig+0x86c>)
 8001a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a56:	4a04      	ldr	r2, [pc, #16]	@ (8001a68 <HAL_RCC_OscConfig+0x86c>)
 8001a58:	f043 0310 	orr.w	r3, r3, #16
 8001a5c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	44020c00 	.word	0x44020c00

08001a6c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e19e      	b.n	8001dbe <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b83      	ldr	r3, [pc, #524]	@ (8001c90 <HAL_RCC_ClockConfig+0x224>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d910      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b80      	ldr	r3, [pc, #512]	@ (8001c90 <HAL_RCC_ClockConfig+0x224>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 020f 	bic.w	r2, r3, #15
 8001a96:	497e      	ldr	r1, [pc, #504]	@ (8001c90 <HAL_RCC_ClockConfig+0x224>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c90 <HAL_RCC_ClockConfig+0x224>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e186      	b.n	8001dbe <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d012      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	4b74      	ldr	r3, [pc, #464]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d909      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001ace:	4b71      	ldr	r3, [pc, #452]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	496d      	ldr	r1, [pc, #436]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d012      	beq.n	8001b14 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	4b68      	ldr	r3, [pc, #416]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d909      	bls.n	8001b14 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001b00:	4b64      	ldr	r3, [pc, #400]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	4961      	ldr	r1, [pc, #388]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d010      	beq.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	4b5b      	ldr	r3, [pc, #364]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d908      	bls.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001b30:	4b58      	ldr	r3, [pc, #352]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4955      	ldr	r1, [pc, #340]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d010      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	4b50      	ldr	r3, [pc, #320]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d908      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001b5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	f023 020f 	bic.w	r2, r3, #15
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	494a      	ldr	r1, [pc, #296]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 8093 	beq.w	8001ca4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001b86:	4b43      	ldr	r3, [pc, #268]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d121      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e113      	b.n	8001dbe <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d115      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e107      	b.n	8001dbe <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001bb6:	4b37      	ldr	r3, [pc, #220]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0fb      	b.n	8001dbe <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc6:	4b33      	ldr	r3, [pc, #204]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0f3      	b.n	8001dbe <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f023 0203 	bic.w	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	492c      	ldr	r1, [pc, #176]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be8:	f7ff f80a 	bl	8000c00 <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d112      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf8:	f7ff f802 	bl	8000c00 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0d7      	b.n	8001dbe <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0e:	4b21      	ldr	r3, [pc, #132]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 0318 	and.w	r3, r3, #24
 8001c16:	2b18      	cmp	r3, #24
 8001c18:	d1ee      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x18c>
 8001c1a:	e043      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d112      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001c26:	f7fe ffeb 	bl	8000c00 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e0c0      	b.n	8001dbe <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	f003 0318 	and.w	r3, r3, #24
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d1ee      	bne.n	8001c26 <HAL_RCC_ClockConfig+0x1ba>
 8001c48:	e02c      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d122      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	f7fe ffd4 	bl	8000c00 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e0a9      	b.n	8001dbe <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_RCC_ClockConfig+0x228>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 0318 	and.w	r3, r3, #24
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d1ee      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
 8001c76:	e015      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001c78:	f7fe ffc2 	bl	8000c00 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d906      	bls.n	8001c98 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e097      	b.n	8001dbe <HAL_RCC_ClockConfig+0x352>
 8001c8e:	bf00      	nop
 8001c90:	40022000 	.word	0x40022000
 8001c94:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c98:	4b4b      	ldr	r3, [pc, #300]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	f003 0318 	and.w	r3, r3, #24
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e9      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d010      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	4b44      	ldr	r3, [pc, #272]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d208      	bcs.n	8001cd2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001cc0:	4b41      	ldr	r3, [pc, #260]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f023 020f 	bic.w	r2, r3, #15
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	493e      	ldr	r1, [pc, #248]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dcc <HAL_RCC_ClockConfig+0x360>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d210      	bcs.n	8001d02 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8001dcc <HAL_RCC_ClockConfig+0x360>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 020f 	bic.w	r2, r3, #15
 8001ce8:	4938      	ldr	r1, [pc, #224]	@ (8001dcc <HAL_RCC_ClockConfig+0x360>)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf0:	4b36      	ldr	r3, [pc, #216]	@ (8001dcc <HAL_RCC_ClockConfig+0x360>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e05d      	b.n	8001dbe <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d010      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d208      	bcs.n	8001d30 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	4927      	ldr	r1, [pc, #156]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d012      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d209      	bcs.n	8001d62 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	491a      	ldr	r1, [pc, #104]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d012      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d209      	bcs.n	8001d94 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001d80:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	490e      	ldr	r1, [pc, #56]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d94:	f000 f822 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	490b      	ldr	r1, [pc, #44]	@ (8001dd0 <HAL_RCC_ClockConfig+0x364>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <HAL_RCC_ClockConfig+0x368>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_RCC_ClockConfig+0x36c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fe9a 	bl	8000aec <HAL_InitTick>
 8001db8:	4603      	mov	r3, r0
 8001dba:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	44020c00 	.word	0x44020c00
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	08004e28 	.word	0x08004e28
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001de2:	4b8c      	ldr	r3, [pc, #560]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0318 	and.w	r3, r3, #24
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d102      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001dee:	4b8a      	ldr	r3, [pc, #552]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	e107      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df4:	4b87      	ldr	r3, [pc, #540]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	f003 0318 	and.w	r3, r3, #24
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d112      	bne.n	8001e26 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001e00:	4b84      	ldr	r3, [pc, #528]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d009      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001e0c:	4b81      	ldr	r3, [pc, #516]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	4a81      	ldr	r2, [pc, #516]	@ (800201c <HAL_RCC_GetSysClockFreq+0x240>)
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e0f1      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001e20:	4b7e      	ldr	r3, [pc, #504]	@ (800201c <HAL_RCC_GetSysClockFreq+0x240>)
 8001e22:	61fb      	str	r3, [r7, #28]
 8001e24:	e0ee      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e26:	4b7b      	ldr	r3, [pc, #492]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 0318 	and.w	r3, r3, #24
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d102      	bne.n	8001e38 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e32:	4b7b      	ldr	r3, [pc, #492]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x244>)
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e0e5      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e38:	4b76      	ldr	r3, [pc, #472]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	f003 0318 	and.w	r3, r3, #24
 8001e40:	2b18      	cmp	r3, #24
 8001e42:	f040 80dd 	bne.w	8002000 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001e46:	4b73      	ldr	r3, [pc, #460]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001e50:	4b70      	ldr	r3, [pc, #448]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e5a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001e5c:	4b6d      	ldr	r3, [pc, #436]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001e68:	4b6a      	ldr	r3, [pc, #424]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001e6c:	08db      	lsrs	r3, r3, #3
 8001e6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e80:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80b7 	beq.w	8001ffa <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d003      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0xbe>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d056      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x16a>
 8001e98:	e077      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001e9a:	4b5e      	ldr	r3, [pc, #376]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d02d      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001ea6:	4b5b      	ldr	r3, [pc, #364]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	08db      	lsrs	r3, r3, #3
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	4a5a      	ldr	r2, [pc, #360]	@ (800201c <HAL_RCC_GetSysClockFreq+0x240>)
 8001eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	ee07 3a90 	vmov	s15, r3
 8001ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ed0:	4b50      	ldr	r3, [pc, #320]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed8:	ee07 3a90 	vmov	s15, r3
 8001edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ee0:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ee4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002024 <HAL_RCC_GetSysClockFreq+0x248>
 8001ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ef0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8001f00:	e065      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002028 <HAL_RCC_GetSysClockFreq+0x24c>
 8001f10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f14:	4b3f      	ldr	r3, [pc, #252]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1c:	ee07 3a90 	vmov	s15, r3
 8001f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f24:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f28:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002024 <HAL_RCC_GetSysClockFreq+0x248>
 8001f2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f40:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001f44:	e043      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f50:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800202c <HAL_RCC_GetSysClockFreq+0x250>
 8001f54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f58:	4b2e      	ldr	r3, [pc, #184]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f60:	ee07 3a90 	vmov	s15, r3
 8001f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f68:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f6c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002024 <HAL_RCC_GetSysClockFreq+0x248>
 8001f70:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f74:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f84:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8001f88:	e021      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f94:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002030 <HAL_RCC_GetSysClockFreq+0x254>
 8001f98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fac:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fb0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002024 <HAL_RCC_GetSysClockFreq+0x248>
 8001fb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001fb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001fcc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8001fce:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x238>)
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd2:	0a5b      	lsrs	r3, r3, #9
 8001fd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fd8:	3301      	adds	r3, #1
 8001fda:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fe6:	edd7 6a06 	vldr	s13, [r7, #24]
 8001fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ff2:	ee17 3a90 	vmov	r3, s15
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	e004      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e001      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_RCC_GetSysClockFreq+0x240>)
 8002002:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002004:	69fb      	ldr	r3, [r7, #28]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	@ 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	44020c00 	.word	0x44020c00
 8002018:	003d0900 	.word	0x003d0900
 800201c:	03d09000 	.word	0x03d09000
 8002020:	017d7840 	.word	0x017d7840
 8002024:	46000000 	.word	0x46000000
 8002028:	4c742400 	.word	0x4c742400
 800202c:	4bbebc20 	.word	0x4bbebc20
 8002030:	4a742400 	.word	0x4a742400

08002034 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002038:	f7ff fed0 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002042:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002046:	4907      	ldr	r1, [pc, #28]	@ (8002064 <HAL_RCC_GetHCLKFreq+0x30>)
 8002048:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800204a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a05      	ldr	r2, [pc, #20]	@ (8002068 <HAL_RCC_GetHCLKFreq+0x34>)
 8002054:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002056:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <HAL_RCC_GetHCLKFreq+0x34>)
 8002058:	681b      	ldr	r3, [r3, #0]
}
 800205a:	4618      	mov	r0, r3
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	44020c00 	.word	0x44020c00
 8002064:	08004e28 	.word	0x08004e28
 8002068:	20000000 	.word	0x20000000

0800206c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002070:	f7ff ffe0 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 8002074:	4602      	mov	r2, r0
 8002076:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	4904      	ldr	r1, [pc, #16]	@ (8002094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002082:	5ccb      	ldrb	r3, [r1, r3]
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	bd80      	pop	{r7, pc}
 8002090:	44020c00 	.word	0x44020c00
 8002094:	08004e38 	.word	0x08004e38

08002098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800209c:	f7ff ffca 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	4904      	ldr	r1, [pc, #16]	@ (80020c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ae:	5ccb      	ldrb	r3, [r1, r3]
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	44020c00 	.word	0x44020c00
 80020c0:	08004e38 	.word	0x08004e38

080020c4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80020c8:	f7ff ffb4 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 80020cc:	4602      	mov	r2, r0
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	0b1b      	lsrs	r3, r3, #12
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	4904      	ldr	r1, [pc, #16]	@ (80020ec <HAL_RCC_GetPCLK3Freq+0x28>)
 80020da:	5ccb      	ldrb	r3, [r1, r3]
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	44020c00 	.word	0x44020c00
 80020ec:	08004e38 	.word	0x08004e38

080020f0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80020f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f4:	b0aa      	sub	sp, #168	@ 0xa8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002102:	2300      	movs	r3, #0
 8002104:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002108:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002114:	2500      	movs	r5, #0
 8002116:	ea54 0305 	orrs.w	r3, r4, r5
 800211a:	d00b      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800211c:	4bb8      	ldr	r3, [pc, #736]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800211e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002122:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002126:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	4ab4      	ldr	r2, [pc, #720]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800212e:	430b      	orrs	r3, r1
 8002130:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002134:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	f002 0801 	and.w	r8, r2, #1
 8002140:	f04f 0900 	mov.w	r9, #0
 8002144:	ea58 0309 	orrs.w	r3, r8, r9
 8002148:	d038      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800214a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800214e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002150:	2b05      	cmp	r3, #5
 8002152:	d819      	bhi.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002154:	a201      	add	r2, pc, #4	@ (adr r2, 800215c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215a:	bf00      	nop
 800215c:	08002191 	.word	0x08002191
 8002160:	08002175 	.word	0x08002175
 8002164:	08002189 	.word	0x08002189
 8002168:	08002191 	.word	0x08002191
 800216c:	08002191 	.word	0x08002191
 8002170:	08002191 	.word	0x08002191
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002174:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002178:	3308      	adds	r3, #8
 800217a:	4618      	mov	r0, r3
 800217c:	f001 ffee 	bl	800415c <RCCEx_PLL2_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002186:	e004      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800218e:	e000      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8002190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002192:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800219a:	4b99      	ldr	r3, [pc, #612]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800219c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021a0:	f023 0107 	bic.w	r1, r3, #7
 80021a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021aa:	4a95      	ldr	r2, [pc, #596]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021ac:	430b      	orrs	r3, r1
 80021ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80021b2:	e003      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80021b8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f002 0a02 	and.w	sl, r2, #2
 80021c8:	f04f 0b00 	mov.w	fp, #0
 80021cc:	ea5a 030b 	orrs.w	r3, sl, fp
 80021d0:	d03c      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80021d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d8:	2b28      	cmp	r3, #40	@ 0x28
 80021da:	d01b      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80021dc:	2b28      	cmp	r3, #40	@ 0x28
 80021de:	d815      	bhi.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d019      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	d811      	bhi.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80021e8:	2b18      	cmp	r3, #24
 80021ea:	d017      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80021ec:	2b18      	cmp	r3, #24
 80021ee:	d80d      	bhi.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d015      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d109      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80021f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021fc:	3308      	adds	r3, #8
 80021fe:	4618      	mov	r0, r3
 8002200:	f001 ffac 	bl	800415c <RCCEx_PLL2_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 800220a:	e00a      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002212:	e006      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002214:	bf00      	nop
 8002216:	e004      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002218:	bf00      	nop
 800221a:	e002      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800221c:	bf00      	nop
 800221e:	e000      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002222:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10c      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800222a:	4b75      	ldr	r3, [pc, #468]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800222c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002230:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002234:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800223a:	4a71      	ldr	r2, [pc, #452]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800223c:	430b      	orrs	r3, r1
 800223e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002242:	e003      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002244:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002248:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800224c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f002 0304 	and.w	r3, r2, #4
 8002258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002262:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002266:	460b      	mov	r3, r1
 8002268:	4313      	orrs	r3, r2
 800226a:	d040      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800226c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002272:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002276:	d01e      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8002278:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800227c:	d817      	bhi.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800227e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002282:	d01a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8002284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002288:	d811      	bhi.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800228a:	2bc0      	cmp	r3, #192	@ 0xc0
 800228c:	d017      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800228e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002290:	d80d      	bhi.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d015      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002296:	2b40      	cmp	r3, #64	@ 0x40
 8002298:	d109      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800229a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800229e:	3308      	adds	r3, #8
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 ff5b 	bl	800415c <RCCEx_PLL2_Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80022ac:	e00a      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80022b4:	e006      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80022b6:	bf00      	nop
 80022b8:	e004      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80022ba:	bf00      	nop
 80022bc:	e002      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80022be:	bf00      	nop
 80022c0:	e000      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80022c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022c4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10c      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80022cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022d2:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80022d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022dc:	4a48      	ldr	r2, [pc, #288]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022de:	430b      	orrs	r3, r1
 80022e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80022e4:	e003      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80022ea:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80022fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002304:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002308:	460b      	mov	r3, r1
 800230a:	4313      	orrs	r3, r2
 800230c:	d043      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800230e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002318:	d021      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800231a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800231e:	d81a      	bhi.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002320:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002324:	d01d      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002326:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800232a:	d814      	bhi.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800232c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002330:	d019      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8002332:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002336:	d80e      	bhi.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002338:	2b00      	cmp	r3, #0
 800233a:	d016      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800233c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002340:	d109      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002342:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002346:	3308      	adds	r3, #8
 8002348:	4618      	mov	r0, r3
 800234a:	f001 ff07 	bl	800415c <RCCEx_PLL2_Config>
 800234e:	4603      	mov	r3, r0
 8002350:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002354:	e00a      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800235c:	e006      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800235e:	bf00      	nop
 8002360:	e004      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002362:	bf00      	nop
 8002364:	e002      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002366:	bf00      	nop
 8002368:	e000      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800236a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800236c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10c      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002374:	4b22      	ldr	r3, [pc, #136]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237a:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800237e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	4a1e      	ldr	r2, [pc, #120]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002386:	430b      	orrs	r3, r1
 8002388:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800238c:	e003      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800238e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002392:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002396:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80023a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023a4:	2300      	movs	r3, #0
 80023a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80023ac:	460b      	mov	r3, r1
 80023ae:	4313      	orrs	r3, r2
 80023b0:	d03e      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80023b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80023bc:	d01b      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
 80023be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80023c2:	d814      	bhi.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80023c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80023c8:	d017      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80023ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80023ce:	d80e      	bhi.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d017      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d8:	d109      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80023da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023de:	3308      	adds	r3, #8
 80023e0:	4618      	mov	r0, r3
 80023e2:	f001 febb 	bl	800415c <RCCEx_PLL2_Config>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80023ec:	e00b      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80023f4:	e007      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80023f6:	bf00      	nop
 80023f8:	e005      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80023fa:	bf00      	nop
 80023fc:	e003      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x316>
 80023fe:	bf00      	nop
 8002400:	44020c00 	.word	0x44020c00
        break;
 8002404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002406:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800240e:	4ba5      	ldr	r3, [pc, #660]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002410:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002414:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002418:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	4aa1      	ldr	r2, [pc, #644]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002420:	430b      	orrs	r3, r1
 8002422:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002426:	e003      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002428:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800242c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002430:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800243c:	673b      	str	r3, [r7, #112]	@ 0x70
 800243e:	2300      	movs	r3, #0
 8002440:	677b      	str	r3, [r7, #116]	@ 0x74
 8002442:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002446:	460b      	mov	r3, r1
 8002448:	4313      	orrs	r3, r2
 800244a:	d03b      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800244c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002452:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002456:	d01b      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8002458:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800245c:	d814      	bhi.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800245e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002462:	d017      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002464:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002468:	d80e      	bhi.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800246a:	2b00      	cmp	r3, #0
 800246c:	d014      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800246e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002472:	d109      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002474:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002478:	3308      	adds	r3, #8
 800247a:	4618      	mov	r0, r3
 800247c:	f001 fe6e 	bl	800415c <RCCEx_PLL2_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002486:	e008      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800248e:	e004      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002490:	bf00      	nop
 8002492:	e002      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002494:	bf00      	nop
 8002496:	e000      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800249a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80024a2:	4b80      	ldr	r3, [pc, #512]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80024a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80024a8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80024ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b2:	4a7c      	ldr	r2, [pc, #496]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80024b4:	430b      	orrs	r3, r1
 80024b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80024ba:	e003      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024bc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80024c0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80024c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80024d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024d2:	2300      	movs	r3, #0
 80024d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80024da:	460b      	mov	r3, r1
 80024dc:	4313      	orrs	r3, r2
 80024de:	d033      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80024e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024ea:	d015      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80024ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024f0:	d80e      	bhi.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d012      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80024f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024fa:	d109      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80024fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002500:	3308      	adds	r3, #8
 8002502:	4618      	mov	r0, r3
 8002504:	f001 fe2a 	bl	800415c <RCCEx_PLL2_Config>
 8002508:	4603      	mov	r3, r0
 800250a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800250e:	e006      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002516:	e002      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002518:	bf00      	nop
 800251a:	e000      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800251c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800251e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002526:	4b5f      	ldr	r3, [pc, #380]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002528:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800252c:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8002530:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002536:	4a5b      	ldr	r2, [pc, #364]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002538:	430b      	orrs	r3, r1
 800253a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800253e:	e003      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002540:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002544:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002548:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	2100      	movs	r1, #0
 8002552:	6639      	str	r1, [r7, #96]	@ 0x60
 8002554:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002558:	667b      	str	r3, [r7, #100]	@ 0x64
 800255a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800255e:	460b      	mov	r3, r1
 8002560:	4313      	orrs	r3, r2
 8002562:	d033      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8002564:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800256e:	d015      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002570:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002574:	d80e      	bhi.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002576:	2b00      	cmp	r3, #0
 8002578:	d012      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800257a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800257e:	d109      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002580:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002584:	3308      	adds	r3, #8
 8002586:	4618      	mov	r0, r3
 8002588:	f001 fde8 	bl	800415c <RCCEx_PLL2_Config>
 800258c:	4603      	mov	r3, r0
 800258e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8002592:	e006      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800259a:	e002      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800259c:	bf00      	nop
 800259e:	e000      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80025a0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80025a2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80025aa:	4b3e      	ldr	r3, [pc, #248]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80025ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80025b0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80025b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ba:	4a3a      	ldr	r2, [pc, #232]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80025bc:	430b      	orrs	r3, r1
 80025be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80025c2:	e003      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80025c8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80025cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	2100      	movs	r1, #0
 80025d6:	65b9      	str	r1, [r7, #88]	@ 0x58
 80025d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80025e2:	460b      	mov	r3, r1
 80025e4:	4313      	orrs	r3, r2
 80025e6:	d00e      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80025e8:	4b2e      	ldr	r3, [pc, #184]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	4a2d      	ldr	r2, [pc, #180]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80025ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80025f2:	61d3      	str	r3, [r2, #28]
 80025f4:	4b2b      	ldr	r3, [pc, #172]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80025f6:	69d9      	ldr	r1, [r3, #28]
 80025f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002600:	4a28      	ldr	r2, [pc, #160]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002602:	430b      	orrs	r3, r1
 8002604:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002606:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8002612:	653b      	str	r3, [r7, #80]	@ 0x50
 8002614:	2300      	movs	r3, #0
 8002616:	657b      	str	r3, [r7, #84]	@ 0x54
 8002618:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800261c:	460b      	mov	r3, r1
 800261e:	4313      	orrs	r3, r2
 8002620:	d046      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002622:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002628:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800262c:	d021      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800262e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002632:	d81a      	bhi.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002638:	d01d      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800263a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800263e:	d814      	bhi.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002640:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002644:	d019      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8002646:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800264a:	d80e      	bhi.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d016      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8002650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002654:	d109      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002656:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800265a:	3308      	adds	r3, #8
 800265c:	4618      	mov	r0, r3
 800265e:	f001 fd7d 	bl	800415c <RCCEx_PLL2_Config>
 8002662:	4603      	mov	r3, r0
 8002664:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002668:	e00a      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002670:	e006      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002672:	bf00      	nop
 8002674:	e004      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002676:	bf00      	nop
 8002678:	e002      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800267a:	bf00      	nop
 800267c:	e000      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800267e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002680:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10f      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800268a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800268e:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002692:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002698:	4a02      	ldr	r2, [pc, #8]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800269a:	430b      	orrs	r3, r1
 800269c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80026a0:	e006      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80026a2:	bf00      	nop
 80026a4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80026ac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80026b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80026bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026be:	2300      	movs	r3, #0
 80026c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80026c6:	460b      	mov	r3, r1
 80026c8:	4313      	orrs	r3, r2
 80026ca:	d043      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80026cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80026d6:	d021      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80026d8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80026dc:	d81a      	bhi.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80026de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026e2:	d01d      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80026e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026e8:	d814      	bhi.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80026ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80026ee:	d019      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80026f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80026f4:	d80e      	bhi.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d016      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80026fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026fe:	d109      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002700:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002704:	3308      	adds	r3, #8
 8002706:	4618      	mov	r0, r3
 8002708:	f001 fd28 	bl	800415c <RCCEx_PLL2_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002712:	e00a      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800271a:	e006      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800271c:	bf00      	nop
 800271e:	e004      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002720:	bf00      	nop
 8002722:	e002      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002724:	bf00      	nop
 8002726:	e000      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800272a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10c      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002732:	4bb6      	ldr	r3, [pc, #728]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002734:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002738:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800273c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002742:	4ab2      	ldr	r2, [pc, #712]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002744:	430b      	orrs	r3, r1
 8002746:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800274a:	e003      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002750:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002754:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8002760:	643b      	str	r3, [r7, #64]	@ 0x40
 8002762:	2300      	movs	r3, #0
 8002764:	647b      	str	r3, [r7, #68]	@ 0x44
 8002766:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800276a:	460b      	mov	r3, r1
 800276c:	4313      	orrs	r3, r2
 800276e:	d030      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002770:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002776:	2b05      	cmp	r3, #5
 8002778:	d80f      	bhi.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800277a:	2b03      	cmp	r3, #3
 800277c:	d211      	bcs.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800277e:	2b01      	cmp	r3, #1
 8002780:	d911      	bls.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8002782:	2b02      	cmp	r3, #2
 8002784:	d109      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002786:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800278a:	3308      	adds	r3, #8
 800278c:	4618      	mov	r0, r3
 800278e:	f001 fce5 	bl	800415c <RCCEx_PLL2_Config>
 8002792:	4603      	mov	r3, r0
 8002794:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002798:	e006      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80027a0:	e002      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80027a2:	bf00      	nop
 80027a4:	e000      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80027a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10c      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80027b0:	4b96      	ldr	r3, [pc, #600]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80027b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027b6:	f023 0107 	bic.w	r1, r3, #7
 80027ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027c0:	4a92      	ldr	r2, [pc, #584]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80027c2:	430b      	orrs	r3, r1
 80027c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027c8:	e003      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80027ce:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80027d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027da:	2100      	movs	r1, #0
 80027dc:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80027e8:	460b      	mov	r3, r1
 80027ea:	4313      	orrs	r3, r2
 80027ec:	d022      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80027ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d005      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002802:	e002      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002804:	bf00      	nop
 8002806:	e000      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800280a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10c      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8002812:	4b7e      	ldr	r3, [pc, #504]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002818:	f023 0108 	bic.w	r1, r3, #8
 800281c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002820:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002822:	4a7a      	ldr	r2, [pc, #488]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002824:	430b      	orrs	r3, r1
 8002826:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800282a:	e003      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002830:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002834:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002840:	633b      	str	r3, [r7, #48]	@ 0x30
 8002842:	2300      	movs	r3, #0
 8002844:	637b      	str	r3, [r7, #52]	@ 0x34
 8002846:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800284a:	460b      	mov	r3, r1
 800284c:	4313      	orrs	r3, r2
 800284e:	f000 80b0 	beq.w	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002852:	4b6f      	ldr	r3, [pc, #444]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	4a6e      	ldr	r2, [pc, #440]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800285e:	f7fe f9cf 	bl	8000c00 <HAL_GetTick>
 8002862:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002866:	e00b      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7fe f9ca 	bl	8000c00 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d903      	bls.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800287e:	e005      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002880:	4b63      	ldr	r3, [pc, #396]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ed      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 800288c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 808a 	bne.w	80029aa <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002896:	4b5d      	ldr	r3, [pc, #372]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800289c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80028a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d022      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80028ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028b2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d01b      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028ba:	4b54      	ldr	r3, [pc, #336]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80028bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028c8:	4b50      	ldr	r3, [pc, #320]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80028ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ce:	4a4f      	ldr	r2, [pc, #316]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028d8:	4b4c      	ldr	r3, [pc, #304]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80028da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028de:	4a4b      	ldr	r2, [pc, #300]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80028e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028e8:	4a48      	ldr	r2, [pc, #288]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80028ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d019      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe f97f 	bl	8000c00 <HAL_GetTick>
 8002902:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002906:	e00d      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002908:	f7fe f97a 	bl	8000c00 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d903      	bls.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8002922:	e006      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002924:	4b39      	ldr	r3, [pc, #228]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0ea      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8002932:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d132      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800293a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800293e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002940:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002944:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002948:	d10f      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800294a:	4b30      	ldr	r3, [pc, #192]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002952:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002956:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800295e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002962:	4a2a      	ldr	r2, [pc, #168]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002964:	430b      	orrs	r3, r1
 8002966:	61d3      	str	r3, [r2, #28]
 8002968:	e005      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x886>
 800296a:	4b28      	ldr	r3, [pc, #160]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	4a27      	ldr	r2, [pc, #156]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002970:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002974:	61d3      	str	r3, [r2, #28]
 8002976:	4b25      	ldr	r3, [pc, #148]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800297c:	4a23      	ldr	r2, [pc, #140]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800297e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002982:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002986:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002988:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800298c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002996:	4a1d      	ldr	r2, [pc, #116]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002998:	430b      	orrs	r3, r1
 800299a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800299e:	e008      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029a0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80029a4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 80029a8:	e003      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80029ae:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80029b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ba:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80029be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029c0:	2300      	movs	r3, #0
 80029c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80029c8:	460b      	mov	r3, r1
 80029ca:	4313      	orrs	r3, r2
 80029cc:	d038      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80029ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d4:	2b30      	cmp	r3, #48	@ 0x30
 80029d6:	d014      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80029d8:	2b30      	cmp	r3, #48	@ 0x30
 80029da:	d80e      	bhi.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d012      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x916>
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d80a      	bhi.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d015      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d106      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029ec:	4b07      	ldr	r3, [pc, #28]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	4a06      	ldr	r2, [pc, #24]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80029f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80029f8:	e00d      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002a00:	e009      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8002a02:	bf00      	nop
 8002a04:	e007      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8002a06:	bf00      	nop
 8002a08:	e005      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8002a0a:	bf00      	nop
 8002a0c:	44020c00 	.word	0x44020c00
 8002a10:	44020800 	.word	0x44020800
        break;
 8002a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a16:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8002a1e:	4bb5      	ldr	r3, [pc, #724]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a2e:	49b1      	ldr	r1, [pc, #708]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8002a36:	e003      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a38:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002a3c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002a40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a48:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8002a4c:	623b      	str	r3, [r7, #32]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002a56:	460b      	mov	r3, r1
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	d03c      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8002a5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d81d      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8002a66:	a201      	add	r2, pc, #4	@ (adr r2, 8002a6c <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002a81 	.word	0x08002a81
 8002a70:	08002a8f 	.word	0x08002a8f
 8002a74:	08002aa3 	.word	0x08002aa3
 8002a78:	08002aab 	.word	0x08002aab
 8002a7c:	08002aab 	.word	0x08002aab
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a80:	4b9c      	ldr	r3, [pc, #624]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a84:	4a9b      	ldr	r2, [pc, #620]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a8a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002a8c:	e00e      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a92:	3308      	adds	r3, #8
 8002a94:	4618      	mov	r0, r3
 8002a96:	f001 fb61 	bl	800415c <RCCEx_PLL2_Config>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002aa0:	e004      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002aa8:	e000      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8002aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10c      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8002ab4:	4b8f      	ldr	r3, [pc, #572]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aba:	f023 0207 	bic.w	r2, r3, #7
 8002abe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ac4:	498b      	ldr	r1, [pc, #556]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8002acc:	e003      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ace:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ad2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8002ad6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002aec:	460b      	mov	r3, r1
 8002aee:	4313      	orrs	r3, r2
 8002af0:	d03c      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8002af2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d01f      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d819      	bhi.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8002b00:	2b18      	cmp	r3, #24
 8002b02:	d01d      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8002b04:	2b18      	cmp	r3, #24
 8002b06:	d815      	bhi.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d007      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8002b10:	e010      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b12:	4b78      	ldr	r3, [pc, #480]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b16:	4a77      	ldr	r2, [pc, #476]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b1c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8002b1e:	e010      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b24:	3308      	adds	r3, #8
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 fb18 	bl	800415c <RCCEx_PLL2_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8002b32:	e006      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002b3a:	e002      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8002b3c:	bf00      	nop
 8002b3e:	e000      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8002b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b42:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8002b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b50:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8002b54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5a:	4966      	ldr	r1, [pc, #408]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8002b62:	e003      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b64:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002b68:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8002b6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002b82:	460b      	mov	r3, r1
 8002b84:	4313      	orrs	r3, r2
 8002b86:	d03e      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8002b88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b92:	d020      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8002b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b98:	d819      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xade>
 8002b9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b9c:	d01d      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8002b9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ba0:	d815      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xade>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8002ba6:	2b40      	cmp	r3, #64	@ 0x40
 8002ba8:	d007      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8002baa:	e010      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bac:	4b51      	ldr	r3, [pc, #324]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb0:	4a50      	ldr	r2, [pc, #320]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bb6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8002bb8:	e010      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002bba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 facb 	bl	800415c <RCCEx_PLL2_Config>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8002bcc:	e006      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002bd4:	e002      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8002bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bdc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10c      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8002be4:	4b43      	ldr	r3, [pc, #268]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bea:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8002bee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf4:	493f      	ldr	r1, [pc, #252]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8002bfc:	e003      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002c02:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	2100      	movs	r1, #0
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	d038      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8002c22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c2c:	d00e      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8002c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c32:	d815      	bhi.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d017      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8002c38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c3c:	d110      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c42:	4a2c      	ldr	r2, [pc, #176]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c48:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002c4a:	e00e      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c50:	3308      	adds	r3, #8
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fa82 	bl	800415c <RCCEx_PLL2_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002c5e:	e004      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002c66:	e000      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8002c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c6a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8002c72:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c82:	491c      	ldr	r1, [pc, #112]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8002c8a:	e003      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002c90:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	6039      	str	r1, [r7, #0]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002caa:	460b      	mov	r3, r1
 8002cac:	4313      	orrs	r3, r2
 8002cae:	d039      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8002cb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cb6:	2b30      	cmp	r3, #48	@ 0x30
 8002cb8:	d01e      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8002cba:	2b30      	cmp	r3, #48	@ 0x30
 8002cbc:	d815      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8002cbe:	2b10      	cmp	r3, #16
 8002cc0:	d002      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d007      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8002cc6:	e010      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ccc:	4a09      	ldr	r2, [pc, #36]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cd2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8002cd4:	e011      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cda:	3308      	adds	r3, #8
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 fa3d 	bl	800415c <RCCEx_PLL2_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8002ce8:	e007      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002cf0:	e003      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8002cf2:	bf00      	nop
 8002cf4:	44020c00 	.word	0x44020c00
        break;
 8002cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cfa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8002d02:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002d04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002d08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d12:	4908      	ldr	r1, [pc, #32]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8002d1a:	e003      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002d20:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8002d24:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	37a8      	adds	r7, #168	@ 0xa8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d32:	bf00      	nop
 8002d34:	44020c00 	.word	0x44020c00

08002d38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b08b      	sub	sp, #44	@ 0x2c
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8002d40:	4bad      	ldr	r3, [pc, #692]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d48:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002d4a:	4bab      	ldr	r3, [pc, #684]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002d54:	4ba8      	ldr	r3, [pc, #672]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d5e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8002d60:	4ba5      	ldr	r3, [pc, #660]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002d6a:	4ba3      	ldr	r3, [pc, #652]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6e:	08db      	lsrs	r3, r3, #3
 8002d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d82:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8126 	beq.w	8002fda <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d053      	beq.n	8002e3c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d86f      	bhi.n	8002e7a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d003      	beq.n	8002da8 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d02b      	beq.n	8002dfe <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8002da6:	e068      	b.n	8002e7a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002da8:	4b93      	ldr	r3, [pc, #588]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	08db      	lsrs	r3, r3, #3
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	4a92      	ldr	r2, [pc, #584]	@ (8002ffc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
 8002db8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	ee07 3a90 	vmov	s15, r3
 8002dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ddc:	ed97 6a04 	vldr	s12, [r7, #16]
 8002de0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8003000 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8002de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002dfc:	e068      	b.n	8002ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	ee07 3a90 	vmov	s15, r3
 8002e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e08:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8003004 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002e0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	ee07 3a90 	vmov	s15, r3
 8002e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e1a:	ed97 6a04 	vldr	s12, [r7, #16]
 8002e1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003000 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8002e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e36:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002e3a:	e049      	b.n	8002ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e46:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003008 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8002e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	ee07 3a90 	vmov	s15, r3
 8002e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e58:	ed97 6a04 	vldr	s12, [r7, #16]
 8002e5c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8003000 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8002e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e74:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002e78:	e02a      	b.n	8002ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	4a5d      	ldr	r2, [pc, #372]	@ (8002ffc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002e86:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	ee07 3a90 	vmov	s15, r3
 8002e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eae:	ed97 6a04 	vldr	s12, [r7, #16]
 8002eb2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003000 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8002eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002ece:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002ed0:	4b49      	ldr	r3, [pc, #292]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002edc:	d121      	bne.n	8002f22 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8002ede:	4b46      	ldr	r3, [pc, #280]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d017      	beq.n	8002f1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002eea:	4b43      	ldr	r3, [pc, #268]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eee:	0a5b      	lsrs	r3, r3, #9
 8002ef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ef4:	ee07 3a90 	vmov	s15, r3
 8002ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8002efc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f00:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002f04:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f10:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	e006      	b.n	8002f28 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e002      	b.n	8002f28 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002f28:	4b33      	ldr	r3, [pc, #204]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f34:	d121      	bne.n	8002f7a <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8002f36:	4b30      	ldr	r3, [pc, #192]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d017      	beq.n	8002f72 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002f42:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f46:	0c1b      	lsrs	r3, r3, #16
 8002f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f4c:	ee07 3a90 	vmov	s15, r3
 8002f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8002f54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f58:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002f5c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f68:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	e006      	b.n	8002f80 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	e002      	b.n	8002f80 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002f80:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f8c:	d121      	bne.n	8002fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d017      	beq.n	8002fca <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002f9a:	4b17      	ldr	r3, [pc, #92]	@ (8002ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f9e:	0e1b      	lsrs	r3, r3, #24
 8002fa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fa4:	ee07 3a90 	vmov	s15, r3
 8002fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8002fac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fb0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002fb4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8002fc8:	e010      	b.n	8002fec <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	e00c      	b.n	8002fec <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	e008      	b.n	8002fec <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	372c      	adds	r7, #44	@ 0x2c
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	44020c00 	.word	0x44020c00
 8002ffc:	03d09000 	.word	0x03d09000
 8003000:	46000000 	.word	0x46000000
 8003004:	4a742400 	.word	0x4a742400
 8003008:	4bbebc20 	.word	0x4bbebc20

0800300c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800300c:	b480      	push	{r7}
 800300e:	b08b      	sub	sp, #44	@ 0x2c
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003014:	4bad      	ldr	r3, [pc, #692]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800301e:	4bab      	ldr	r3, [pc, #684]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003028:	4ba8      	ldr	r3, [pc, #672]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003032:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8003034:	4ba5      	ldr	r3, [pc, #660]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800303e:	4ba3      	ldr	r3, [pc, #652]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	08db      	lsrs	r3, r3, #3
 8003044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003056:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8126 	beq.w	80032ae <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d053      	beq.n	8003110 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d86f      	bhi.n	800314e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d003      	beq.n	800307c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d02b      	beq.n	80030d2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800307a:	e068      	b.n	800314e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800307c:	4b93      	ldr	r3, [pc, #588]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	08db      	lsrs	r3, r3, #3
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	4a92      	ldr	r2, [pc, #584]	@ (80032d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
 800308c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	ee07 3a90 	vmov	s15, r3
 8003094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030b0:	ed97 6a04 	vldr	s12, [r7, #16]
 80030b4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80032d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80030b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80030d0:	e068      	b.n	80031a4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	ee07 3a90 	vmov	s15, r3
 80030d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030dc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80032d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80030e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ee:	ed97 6a04 	vldr	s12, [r7, #16]
 80030f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80032d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80030f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800310e:	e049      	b.n	80031a4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80032dc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800311e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	ee07 3a90 	vmov	s15, r3
 8003128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003130:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80032d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003148:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800314c:	e02a      	b.n	80031a4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800314e:	4b5f      	ldr	r3, [pc, #380]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	08db      	lsrs	r3, r3, #3
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	4a5d      	ldr	r2, [pc, #372]	@ (80032d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800315a:	fa22 f303 	lsr.w	r3, r2, r3
 800315e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	ee07 3a90 	vmov	s15, r3
 8003170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003182:	ed97 6a04 	vldr	s12, [r7, #16]
 8003186:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80032d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800318a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800318e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800319a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80031a2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80031a4:	4b49      	ldr	r3, [pc, #292]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031b0:	d121      	bne.n	80031f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80031b2:	4b46      	ldr	r3, [pc, #280]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80031b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d017      	beq.n	80031ee <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80031be:	4b43      	ldr	r3, [pc, #268]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80031c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c2:	0a5b      	lsrs	r3, r3, #9
 80031c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031c8:	ee07 3a90 	vmov	s15, r3
 80031cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80031d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031d4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80031d8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80031dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e006      	b.n	80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e002      	b.n	80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80031fc:	4b33      	ldr	r3, [pc, #204]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003204:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003208:	d121      	bne.n	800324e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800320a:	4b30      	ldr	r3, [pc, #192]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d017      	beq.n	8003246 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003216:	4b2d      	ldr	r3, [pc, #180]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321a:	0c1b      	lsrs	r3, r3, #16
 800321c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003220:	ee07 3a90 	vmov	s15, r3
 8003224:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003228:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800322c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003230:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800323c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	605a      	str	r2, [r3, #4]
 8003244:	e006      	b.n	8003254 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	e002      	b.n	8003254 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003254:	4b1d      	ldr	r3, [pc, #116]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800325c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003260:	d121      	bne.n	80032a6 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003262:	4b1a      	ldr	r3, [pc, #104]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d017      	beq.n	800329e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800326e:	4b17      	ldr	r3, [pc, #92]	@ (80032cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003272:	0e1b      	lsrs	r3, r3, #24
 8003274:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003278:	ee07 3a90 	vmov	s15, r3
 800327c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8003280:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003284:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003288:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800328c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003294:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800329c:	e010      	b.n	80032c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
}
 80032a4:	e00c      	b.n	80032c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	e008      	b.n	80032c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	bf00      	nop
 80032c2:	372c      	adds	r7, #44	@ 0x2c
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	44020c00 	.word	0x44020c00
 80032d0:	03d09000 	.word	0x03d09000
 80032d4:	46000000 	.word	0x46000000
 80032d8:	4a742400 	.word	0x4a742400
 80032dc:	4bbebc20 	.word	0x4bbebc20

080032e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08c      	sub	sp, #48	@ 0x30
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80032ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032ee:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80032f2:	430b      	orrs	r3, r1
 80032f4:	d14b      	bne.n	800338e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80032f6:	4bc4      	ldr	r3, [pc, #784]	@ (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80032f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003300:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003302:	4bc1      	ldr	r3, [pc, #772]	@ (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b02      	cmp	r3, #2
 800330e:	d108      	bne.n	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003316:	d104      	bne.n	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003318:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800331c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800331e:	f000 bf14 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003322:	4bb9      	ldr	r3, [pc, #740]	@ (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800332c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003330:	d108      	bne.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8003332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003338:	d104      	bne.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800333a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003340:	f000 bf03 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8003344:	4bb0      	ldr	r3, [pc, #704]	@ (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003350:	d119      	bne.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8003352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003354:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003358:	d115      	bne.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800335a:	4bab      	ldr	r3, [pc, #684]	@ (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8003362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003366:	d30a      	bcc.n	800337e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8003368:	4ba7      	ldr	r3, [pc, #668]	@ (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003372:	4aa6      	ldr	r2, [pc, #664]	@ (800360c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800337a:	f000 bee6 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003382:	f000 bee2 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800338a:	f000 bede 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800338e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003392:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8003396:	ea52 0301 	orrs.w	r3, r2, r1
 800339a:	f000 838e 	beq.w	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800339e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033a2:	2a01      	cmp	r2, #1
 80033a4:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 80033a8:	f080 86cc 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80033ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033b0:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 80033b4:	ea52 0301 	orrs.w	r3, r2, r1
 80033b8:	f000 82aa 	beq.w	8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80033bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033c0:	2a01      	cmp	r2, #1
 80033c2:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 80033c6:	f080 86bd 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80033ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033ce:	f1a3 0110 	sub.w	r1, r3, #16
 80033d2:	ea52 0301 	orrs.w	r3, r2, r1
 80033d6:	f000 8681 	beq.w	80040dc <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80033da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033de:	2a01      	cmp	r2, #1
 80033e0:	f173 0310 	sbcs.w	r3, r3, #16
 80033e4:	f080 86ae 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80033e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033ec:	1f19      	subs	r1, r3, #4
 80033ee:	ea52 0301 	orrs.w	r3, r2, r1
 80033f2:	f000 84b1 	beq.w	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80033f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033fa:	2a01      	cmp	r2, #1
 80033fc:	f173 0304 	sbcs.w	r3, r3, #4
 8003400:	f080 86a0 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003408:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800340c:	430b      	orrs	r3, r1
 800340e:	f000 85aa 	beq.w	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8003412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003416:	497e      	ldr	r1, [pc, #504]	@ (8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8003418:	428a      	cmp	r2, r1
 800341a:	f173 0300 	sbcs.w	r3, r3, #0
 800341e:	f080 8691 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003426:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800342a:	430b      	orrs	r3, r1
 800342c:	f000 8532 	beq.w	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8003430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003434:	4977      	ldr	r1, [pc, #476]	@ (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8003436:	428a      	cmp	r2, r1
 8003438:	f173 0300 	sbcs.w	r3, r3, #0
 800343c:	f080 8682 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003444:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8003448:	430b      	orrs	r3, r1
 800344a:	f000 84bc 	beq.w	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 800344e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003452:	4971      	ldr	r1, [pc, #452]	@ (8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8003454:	428a      	cmp	r2, r1
 8003456:	f173 0300 	sbcs.w	r3, r3, #0
 800345a:	f080 8673 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800345e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003462:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8003466:	430b      	orrs	r3, r1
 8003468:	f000 85f2 	beq.w	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 800346c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003470:	496a      	ldr	r1, [pc, #424]	@ (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8003472:	428a      	cmp	r2, r1
 8003474:	f173 0300 	sbcs.w	r3, r3, #0
 8003478:	f080 8664 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800347c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003480:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8003484:	430b      	orrs	r3, r1
 8003486:	f000 81e5 	beq.w	8003854 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800348a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800348e:	4964      	ldr	r1, [pc, #400]	@ (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8003490:	428a      	cmp	r2, r1
 8003492:	f173 0300 	sbcs.w	r3, r3, #0
 8003496:	f080 8655 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800349a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800349e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80034a2:	430b      	orrs	r3, r1
 80034a4:	f000 83cc 	beq.w	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80034a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ac:	495d      	ldr	r1, [pc, #372]	@ (8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80034ae:	428a      	cmp	r2, r1
 80034b0:	f173 0300 	sbcs.w	r3, r3, #0
 80034b4:	f080 8646 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80034b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034bc:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80034c0:	430b      	orrs	r3, r1
 80034c2:	f000 8331 	beq.w	8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 80034c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ca:	4957      	ldr	r1, [pc, #348]	@ (8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80034cc:	428a      	cmp	r2, r1
 80034ce:	f173 0300 	sbcs.w	r3, r3, #0
 80034d2:	f080 8637 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80034d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034da:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80034de:	430b      	orrs	r3, r1
 80034e0:	f000 82bb 	beq.w	8003a5a <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 80034e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034e8:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80034ec:	f173 0300 	sbcs.w	r3, r3, #0
 80034f0:	f080 8628 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80034f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034f8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80034fc:	430b      	orrs	r3, r1
 80034fe:	f000 826d 	beq.w	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8003502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003506:	f244 0101 	movw	r1, #16385	@ 0x4001
 800350a:	428a      	cmp	r2, r1
 800350c:	f173 0300 	sbcs.w	r3, r3, #0
 8003510:	f080 8618 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003518:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800351c:	430b      	orrs	r3, r1
 800351e:	f000 821e 	beq.w	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8003522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003526:	f242 0101 	movw	r1, #8193	@ 0x2001
 800352a:	428a      	cmp	r2, r1
 800352c:	f173 0300 	sbcs.w	r3, r3, #0
 8003530:	f080 8608 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003538:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800353c:	430b      	orrs	r3, r1
 800353e:	f000 8137 	beq.w	80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8003542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003546:	f241 0101 	movw	r1, #4097	@ 0x1001
 800354a:	428a      	cmp	r2, r1
 800354c:	f173 0300 	sbcs.w	r3, r3, #0
 8003550:	f080 85f8 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003558:	1f11      	subs	r1, r2, #4
 800355a:	430b      	orrs	r3, r1
 800355c:	f000 80d2 	beq.w	8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8003560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003564:	2a05      	cmp	r2, #5
 8003566:	f173 0300 	sbcs.w	r3, r3, #0
 800356a:	f080 85eb 	bcs.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800356e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003572:	1e51      	subs	r1, r2, #1
 8003574:	430b      	orrs	r3, r1
 8003576:	d006      	beq.n	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8003578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800357c:	1e91      	subs	r1, r2, #2
 800357e:	430b      	orrs	r3, r1
 8003580:	d06c      	beq.n	800365c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8003582:	f000 bddf 	b.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003586:	4b20      	ldr	r3, [pc, #128]	@ (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003588:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8003598:	f7fe fd7e 	bl	8002098 <HAL_RCC_GetPCLK2Freq>
 800359c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800359e:	f000 bdd4 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80035a2:	4b19      	ldr	r3, [pc, #100]	@ (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035ae:	d10a      	bne.n	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 80035b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d107      	bne.n	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fd26 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c4:	e048      	b.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80035c6:	4b10      	ldr	r3, [pc, #64]	@ (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d10c      	bne.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80035d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d109      	bne.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80035d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	08db      	lsrs	r3, r3, #3
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	4a12      	ldr	r2, [pc, #72]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ea:	e035      	b.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80035ec:	4b06      	ldr	r3, [pc, #24]	@ (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035f8:	d11c      	bne.n	8003634 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80035fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d119      	bne.n	8003634 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8003600:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8003602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003604:	e028      	b.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8003606:	bf00      	nop
 8003608:	44020c00 	.word	0x44020c00
 800360c:	017d7840 	.word	0x017d7840
 8003610:	20000001 	.word	0x20000001
 8003614:	10000001 	.word	0x10000001
 8003618:	08000001 	.word	0x08000001
 800361c:	04000001 	.word	0x04000001
 8003620:	00200001 	.word	0x00200001
 8003624:	00040001 	.word	0x00040001
 8003628:	00020001 	.word	0x00020001
 800362c:	03d09000 	.word	0x03d09000
 8003630:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003634:	4b9f      	ldr	r3, [pc, #636]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b02      	cmp	r3, #2
 8003640:	d106      	bne.n	8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8003642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003644:	2b05      	cmp	r3, #5
 8003646:	d103      	bne.n	8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8003648:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800364c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800364e:	e003      	b.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003654:	f000 bd79 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003658:	f000 bd77 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800365c:	4b95      	ldr	r3, [pc, #596]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800365e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003666:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800366e:	f7fe fcfd 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 8003672:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003674:	f000 bd69 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8003678:	4b8e      	ldr	r3, [pc, #568]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003684:	d10a      	bne.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8003686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003688:	2b08      	cmp	r3, #8
 800368a:	d107      	bne.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fcbb 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800369a:	e031      	b.n	8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800369c:	4b85      	ldr	r3, [pc, #532]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d10c      	bne.n	80036c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80036a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036aa:	2b18      	cmp	r3, #24
 80036ac:	d109      	bne.n	80036c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80036ae:	4b81      	ldr	r3, [pc, #516]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	4a7f      	ldr	r2, [pc, #508]	@ (80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036c0:	e01e      	b.n	8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80036c2:	4b7c      	ldr	r3, [pc, #496]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ce:	d105      	bne.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80036d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d102      	bne.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 80036d6:	4b79      	ldr	r3, [pc, #484]	@ (80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80036d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036da:	e011      	b.n	8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80036dc:	4b75      	ldr	r3, [pc, #468]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80036de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d106      	bne.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80036ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ec:	2b28      	cmp	r3, #40	@ 0x28
 80036ee:	d103      	bne.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 80036f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036f6:	e003      	b.n	8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036fc:	f000 bd25 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003700:	f000 bd23 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003704:	4b6b      	ldr	r3, [pc, #428]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003706:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800370a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800370e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003716:	f7fe fca9 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 800371a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800371c:	f000 bd15 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8003720:	4b64      	ldr	r3, [pc, #400]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003728:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800372c:	d10a      	bne.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 800372e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003730:	2b40      	cmp	r3, #64	@ 0x40
 8003732:	d107      	bne.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003734:	f107 030c 	add.w	r3, r7, #12
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fc67 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003742:	e033      	b.n	80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003744:	4b5b      	ldr	r3, [pc, #364]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b02      	cmp	r3, #2
 800374e:	d10c      	bne.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8003750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003752:	2bc0      	cmp	r3, #192	@ 0xc0
 8003754:	d109      	bne.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003756:	4b57      	ldr	r3, [pc, #348]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	08db      	lsrs	r3, r3, #3
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	4a55      	ldr	r2, [pc, #340]	@ (80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003762:	fa22 f303 	lsr.w	r3, r2, r3
 8003766:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003768:	e020      	b.n	80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800376a:	4b52      	ldr	r3, [pc, #328]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003772:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003776:	d106      	bne.n	8003786 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8003778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800377e:	d102      	bne.n	8003786 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8003780:	4b4e      	ldr	r3, [pc, #312]	@ (80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003784:	e012      	b.n	80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003786:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d107      	bne.n	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8003794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003796:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800379a:	d103      	bne.n	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 800379c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037a2:	e003      	b.n	80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037a8:	f000 bccf 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80037ac:	f000 bccd 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80037b0:	4b40      	ldr	r3, [pc, #256]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80037b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037b6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80037ba:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d104      	bne.n	80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80037c2:	f7fe fc7f 	bl	80020c4 <HAL_RCC_GetPCLK3Freq>
 80037c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80037c8:	f000 bcbf 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80037cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037d2:	d108      	bne.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fc17 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037e2:	f000 bcb2 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80037e6:	4b33      	ldr	r3, [pc, #204]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d10d      	bne.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80037f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037f8:	d109      	bne.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80037fa:	4b2e      	ldr	r3, [pc, #184]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	08db      	lsrs	r3, r3, #3
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	4a2c      	ldr	r2, [pc, #176]	@ (80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003806:	fa22 f303 	lsr.w	r3, r2, r3
 800380a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800380c:	e020      	b.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800380e:	4b29      	ldr	r3, [pc, #164]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800381a:	d106      	bne.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 800381c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003822:	d102      	bne.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8003824:	4b25      	ldr	r3, [pc, #148]	@ (80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003828:	e012      	b.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800382a:	4b22      	ldr	r3, [pc, #136]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800382c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b02      	cmp	r3, #2
 8003836:	d107      	bne.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8003838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800383e:	d103      	bne.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8003840:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003846:	e003      	b.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800384c:	f000 bc7d 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003850:	f000 bc7b 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8003854:	4b17      	ldr	r3, [pc, #92]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8003860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003862:	2b00      	cmp	r3, #0
 8003864:	d104      	bne.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8003866:	f7fe fbe5 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 800386a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800386c:	f000 bc6d 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8003870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003872:	2b01      	cmp	r3, #1
 8003874:	d104      	bne.n	8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003876:	f7fe fab1 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 800387a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 800387c:	f000 bc65 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8003880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003882:	2b02      	cmp	r3, #2
 8003884:	d108      	bne.n	8003898 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003886:	f107 030c 	add.w	r3, r7, #12
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fbbe 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003894:	f000 bc59 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8003898:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038a4:	d10e      	bne.n	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80038a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d10b      	bne.n	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 80038ac:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80038ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b0:	e02c      	b.n	800390c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 80038b2:	bf00      	nop
 80038b4:	44020c00 	.word	0x44020c00
 80038b8:	03d09000 	.word	0x03d09000
 80038bc:	003d0900 	.word	0x003d0900
 80038c0:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80038c4:	4b95      	ldr	r3, [pc, #596]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d10c      	bne.n	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 80038d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d109      	bne.n	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80038d6:	4b91      	ldr	r3, [pc, #580]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	08db      	lsrs	r3, r3, #3
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	4a8f      	ldr	r2, [pc, #572]	@ (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038e8:	e010      	b.n	800390c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80038ea:	4b8c      	ldr	r3, [pc, #560]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038f6:	d105      	bne.n	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80038f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fa:	2b05      	cmp	r3, #5
 80038fc:	d102      	bne.n	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 80038fe:	4b89      	ldr	r3, [pc, #548]	@ (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003902:	e003      	b.n	800390c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003908:	f000 bc1f 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800390c:	f000 bc1d 	b.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8003910:	4b82      	ldr	r3, [pc, #520]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800391c:	4b7f      	ldr	r3, [pc, #508]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800391e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b02      	cmp	r3, #2
 8003928:	d106      	bne.n	8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800392a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	d103      	bne.n	8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8003930:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003936:	e011      	b.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8003938:	4b78      	ldr	r3, [pc, #480]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800393a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800393e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003942:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003946:	d106      	bne.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8003948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394a:	2b08      	cmp	r3, #8
 800394c:	d103      	bne.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 800394e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003954:	e002      	b.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 800395a:	e3f6      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800395c:	e3f5      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800395e:	4b6f      	ldr	r3, [pc, #444]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003960:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003964:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003968:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800396a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396c:	2b00      	cmp	r3, #0
 800396e:	d103      	bne.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003970:	f7fe fb7c 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 8003974:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003976:	e3e8      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8003978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800397e:	d107      	bne.n	8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003980:	f107 030c 	add.w	r3, r7, #12
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fb41 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800398e:	e3dc      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003990:	4b62      	ldr	r3, [pc, #392]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b02      	cmp	r3, #2
 800399a:	d10d      	bne.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800399c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039a2:	d109      	bne.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80039a4:	4b5d      	ldr	r3, [pc, #372]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	08db      	lsrs	r3, r3, #3
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	4a5c      	ldr	r2, [pc, #368]	@ (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039b6:	e010      	b.n	80039da <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80039b8:	4b58      	ldr	r3, [pc, #352]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039c4:	d106      	bne.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039cc:	d102      	bne.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 80039ce:	4b55      	ldr	r3, [pc, #340]	@ (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80039d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039d2:	e002      	b.n	80039da <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039d8:	e3b7      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80039da:	e3b6      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80039dc:	4b4f      	ldr	r3, [pc, #316]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80039de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039e2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80039e6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80039e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80039ee:	f7fe fb3d 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 80039f2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80039f4:	e3a9      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 80039f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039fc:	d107      	bne.n	8003a0e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039fe:	f107 030c 	add.w	r3, r7, #12
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fb02 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a0c:	e39d      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8003a0e:	4b43      	ldr	r3, [pc, #268]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d10d      	bne.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8003a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a20:	d109      	bne.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a22:	4b3e      	ldr	r3, [pc, #248]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	08db      	lsrs	r3, r3, #3
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a34:	e010      	b.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8003a36:	4b39      	ldr	r3, [pc, #228]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a42:	d106      	bne.n	8003a52 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8003a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a46:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a4a:	d102      	bne.n	8003a52 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8003a4c:	4b35      	ldr	r3, [pc, #212]	@ (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a50:	e002      	b.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a56:	e378      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003a58:	e377      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8003a5a:	4b30      	ldr	r3, [pc, #192]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003a5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a60:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8003a64:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8003a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a6c:	f7fe fafe 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 8003a70:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003a72:	e36a      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8003a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a7c:	f107 030c 	add.w	r3, r7, #12
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fac3 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a8a:	e35e      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8003a8c:	4b23      	ldr	r3, [pc, #140]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d10d      	bne.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8003a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a9e:	d109      	bne.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	08db      	lsrs	r3, r3, #3
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ab2:	e34a      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ab8:	e347      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8003aba:	4b18      	ldr	r3, [pc, #96]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003abc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ac0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8003ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003acc:	f7fe fafa 	bl	80020c4 <HAL_RCC_GetPCLK3Freq>
 8003ad0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003ad2:	e33a      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8003ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ada:	d107      	bne.n	8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003adc:	f107 030c 	add.w	r3, r7, #12
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fa93 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003aea:	e32e      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8003aec:	4b0b      	ldr	r3, [pc, #44]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d10d      	bne.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8003af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003afe:	d109      	bne.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003b00:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	08db      	lsrs	r3, r3, #3
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	4a05      	ldr	r2, [pc, #20]	@ (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b12:	e31a      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b18:	e317      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003b1a:	bf00      	nop
 8003b1c:	44020c00 	.word	0x44020c00
 8003b20:	03d09000 	.word	0x03d09000
 8003b24:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003b28:	4b9b      	ldr	r3, [pc, #620]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003b2a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003b2e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b36:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003b3a:	d044      	beq.n	8003bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003b42:	d879      	bhi.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8003b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b4a:	d02d      	beq.n	8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8003b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b52:	d871      	bhi.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8003b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b5a:	d017      	beq.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b62:	d869      	bhi.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8003b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8003b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b70:	d004      	beq.n	8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8003b72:	e061      	b.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8003b74:	f7fe faa6 	bl	80020c4 <HAL_RCC_GetPCLK3Freq>
 8003b78:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8003b7a:	e060      	b.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b7c:	f107 030c 	add.w	r3, r7, #12
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fa43 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003b8a:	e058      	b.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003b8c:	4b82      	ldr	r3, [pc, #520]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d103      	bne.n	8003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8003b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003ba0:	e04d      	b.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003ba6:	e04a      	b.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8003ba8:	4b7b      	ldr	r3, [pc, #492]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bb6:	d103      	bne.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8003bb8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003bbe:	e03e      	b.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003bc4:	e03b      	b.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003bc6:	4b74      	ldr	r3, [pc, #464]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bcc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003bd2:	4b71      	ldr	r3, [pc, #452]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003be4:	4b6c      	ldr	r3, [pc, #432]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	08db      	lsrs	r3, r3, #3
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	4a6b      	ldr	r2, [pc, #428]	@ (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bf6:	e01e      	b.n	8003c36 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003bf8:	4b67      	ldr	r3, [pc, #412]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c04:	d106      	bne.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0c:	d102      	bne.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003c0e:	4b64      	ldr	r3, [pc, #400]	@ (8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8003c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c12:	e010      	b.n	8003c36 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003c14:	4b60      	ldr	r3, [pc, #384]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c20:	d106      	bne.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c28:	d102      	bne.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003c2a:	4b5e      	ldr	r3, [pc, #376]	@ (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8003c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c2e:	e002      	b.n	8003c36 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8003c34:	e003      	b.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8003c36:	e002      	b.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003c3c:	bf00      	nop
          }
        }
        break;
 8003c3e:	e284      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003c40:	4b55      	ldr	r3, [pc, #340]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003c42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003c46:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003c52:	d044      	beq.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8003c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c56:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003c5a:	d879      	bhi.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c62:	d02d      	beq.n	8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8003c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c6a:	d871      	bhi.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c72:	d017      	beq.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c7a:	d869      	bhi.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8003c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c88:	d004      	beq.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8003c8a:	e061      	b.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8003c8c:	f7fe f9ee 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 8003c90:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8003c92:	e060      	b.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c94:	f107 030c 	add.w	r3, r7, #12
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff f9b7 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003ca2:	e058      	b.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d103      	bne.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8003cb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003cb8:	e04d      	b.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003cbe:	e04a      	b.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8003cc0:	4b35      	ldr	r3, [pc, #212]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cce:	d103      	bne.n	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8003cd0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003cd6:	e03e      	b.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003cdc:	e03b      	b.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003cde:	4b2e      	ldr	r3, [pc, #184]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ce4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003cea:	4b2b      	ldr	r3, [pc, #172]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003cfc:	4b26      	ldr	r3, [pc, #152]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	08db      	lsrs	r3, r3, #3
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	4a25      	ldr	r2, [pc, #148]	@ (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d0e:	e01e      	b.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003d10:	4b21      	ldr	r3, [pc, #132]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d1c:	d106      	bne.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d24:	d102      	bne.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003d26:	4b1e      	ldr	r3, [pc, #120]	@ (8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8003d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d2a:	e010      	b.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d38:	d106      	bne.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d40:	d102      	bne.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003d42:	4b18      	ldr	r3, [pc, #96]	@ (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8003d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d46:	e002      	b.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8003d4c:	e003      	b.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8003d4e:	e002      	b.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003d54:	bf00      	nop
          }
        }
        break;
 8003d56:	e1f8      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8003d58:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8003d64:	4b0c      	ldr	r3, [pc, #48]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d70:	d105      	bne.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8003d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8003d78:	4b0a      	ldr	r3, [pc, #40]	@ (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8003d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8003d7c:	e1e5      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d84:	d110      	bne.n	8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d86:	f107 0318 	add.w	r3, r7, #24
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fe ffd4 	bl	8002d38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003d94:	e1d9      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003d96:	bf00      	nop
 8003d98:	44020c00 	.word	0x44020c00
 8003d9c:	03d09000 	.word	0x03d09000
 8003da0:	003d0900 	.word	0x003d0900
 8003da4:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dae:	d107      	bne.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003db0:	f107 030c 	add.w	r3, r7, #12
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff f929 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dbe:	e1c4      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dc4:	e1c1      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8003dc6:	4b9d      	ldr	r3, [pc, #628]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d859      	bhi.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8003dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003df5 	.word	0x08003df5
 8003de4:	08003e05 	.word	0x08003e05
 8003de8:	08003e8d 	.word	0x08003e8d
 8003dec:	08003e15 	.word	0x08003e15
 8003df0:	08003e1b 	.word	0x08003e1b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003df4:	f107 0318 	add.w	r3, r7, #24
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fe ff9d 	bl	8002d38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003e02:	e046      	b.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e04:	f107 030c 	add.w	r3, r7, #12
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff f8ff 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003e12:	e03e      	b.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8003e14:	4b8a      	ldr	r3, [pc, #552]	@ (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003e18:	e03b      	b.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003e1a:	4b88      	ldr	r3, [pc, #544]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e20:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003e26:	4b85      	ldr	r3, [pc, #532]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d109      	bne.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e38:	4b80      	ldr	r3, [pc, #512]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	08db      	lsrs	r3, r3, #3
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	4a80      	ldr	r2, [pc, #512]	@ (8004044 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
 8003e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e4a:	e01e      	b.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003e4c:	4b7b      	ldr	r3, [pc, #492]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e58:	d106      	bne.n	8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e60:	d102      	bne.n	8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003e62:	4b79      	ldr	r3, [pc, #484]	@ (8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8003e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e66:	e010      	b.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003e68:	4b74      	ldr	r3, [pc, #464]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e74:	d106      	bne.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e7c:	d102      	bne.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003e7e:	4b73      	ldr	r3, [pc, #460]	@ (800404c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8003e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e82:	e002      	b.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8003e88:	e003      	b.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8003e8a:	e002      	b.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003e90:	bf00      	nop
          }
        }
        break;
 8003e92:	e15a      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8003e94:	4b69      	ldr	r3, [pc, #420]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d022      	beq.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8003ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d858      	bhi.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8003eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eae:	2b18      	cmp	r3, #24
 8003eb0:	d019      	beq.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	2b18      	cmp	r3, #24
 8003eb6:	d852      	bhi.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8003eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8003ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8003ec4:	e04b      	b.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003ec6:	f107 0318 	add.w	r3, r7, #24
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe ff34 	bl	8002d38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003ed4:	e046      	b.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ed6:	f107 030c 	add.w	r3, r7, #12
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff f896 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003ee4:	e03e      	b.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8003ee6:	4b56      	ldr	r3, [pc, #344]	@ (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003eea:	e03b      	b.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003eec:	4b53      	ldr	r3, [pc, #332]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003eee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ef2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003ef8:	4b50      	ldr	r3, [pc, #320]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d10c      	bne.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	08db      	lsrs	r3, r3, #3
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	4a4b      	ldr	r2, [pc, #300]	@ (8004044 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003f16:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f1c:	e01e      	b.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003f1e:	4b47      	ldr	r3, [pc, #284]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f32:	d102      	bne.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003f34:	4b44      	ldr	r3, [pc, #272]	@ (8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8003f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f38:	e010      	b.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003f3a:	4b40      	ldr	r3, [pc, #256]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f46:	d106      	bne.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f4e:	d102      	bne.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003f50:	4b3e      	ldr	r3, [pc, #248]	@ (800404c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8003f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f54:	e002      	b.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8003f5a:	e003      	b.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8003f5c:	e002      	b.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003f62:	bf00      	nop
          }
        }
        break;
 8003f64:	e0f1      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8003f66:	4b35      	ldr	r3, [pc, #212]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f6c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8003f70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f78:	d023      	beq.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8003f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f80:	d858      	bhi.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8003f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f84:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f86:	d019      	beq.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8003f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f8c:	d852      	bhi.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8003f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8003f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f96:	2b40      	cmp	r3, #64	@ 0x40
 8003f98:	d008      	beq.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8003f9a:	e04b      	b.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003f9c:	f107 0318 	add.w	r3, r7, #24
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fec9 	bl	8002d38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003faa:	e046      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fac:	f107 030c 	add.w	r3, r7, #12
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff f82b 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003fba:	e03e      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8003fbc:	4b20      	ldr	r3, [pc, #128]	@ (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003fc0:	e03b      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003fc8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003fce:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d109      	bne.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fe0:	4b16      	ldr	r3, [pc, #88]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	08db      	lsrs	r3, r3, #3
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	4a16      	ldr	r2, [pc, #88]	@ (8004044 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff2:	e01e      	b.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003ff4:	4b11      	ldr	r3, [pc, #68]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004000:	d106      	bne.n	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004008:	d102      	bne.n	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800400a:	4b0f      	ldr	r3, [pc, #60]	@ (8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 800400c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800400e:	e010      	b.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004010:	4b0a      	ldr	r3, [pc, #40]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004018:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800401c:	d106      	bne.n	800402c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004024:	d102      	bne.n	800402c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004026:	4b09      	ldr	r3, [pc, #36]	@ (800404c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800402a:	e002      	b.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004030:	e003      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004032:	e002      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004038:	bf00      	nop
          }
        }
        break;
 800403a:	e086      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800403c:	44020c00 	.word	0x44020c00
 8004040:	00bb8000 	.word	0x00bb8000
 8004044:	03d09000 	.word	0x03d09000
 8004048:	003d0900 	.word	0x003d0900
 800404c:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004050:	4b40      	ldr	r3, [pc, #256]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004056:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800405a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800405c:	4b3d      	ldr	r3, [pc, #244]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004068:	d105      	bne.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8004070:	4b39      	ldr	r3, [pc, #228]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004074:	e031      	b.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8004076:	4b37      	ldr	r3, [pc, #220]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004082:	d10a      	bne.n	800409a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8004084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004086:	2b10      	cmp	r3, #16
 8004088:	d107      	bne.n	800409a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800408a:	f107 0318 	add.w	r3, r7, #24
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe fe52 	bl	8002d38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004098:	e01f      	b.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800409a:	4b2e      	ldr	r3, [pc, #184]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800409c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d106      	bne.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 80040a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d103      	bne.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040b4:	e011      	b.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80040b6:	4b27      	ldr	r3, [pc, #156]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80040b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040c4:	d106      	bne.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 80040c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c8:	2b30      	cmp	r3, #48	@ 0x30
 80040ca:	d103      	bne.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 80040cc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80040d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040d2:	e002      	b.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80040d8:	e037      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80040da:	e036      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80040dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80040de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040e6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80040e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ea:	2b10      	cmp	r3, #16
 80040ec:	d107      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80040ee:	f107 0318 	add.w	r3, r7, #24
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fe20 	bl	8002d38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80040fc:	e025      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80040fe:	4b15      	ldr	r3, [pc, #84]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004106:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800410a:	d10a      	bne.n	8004122 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 800410c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410e:	2b20      	cmp	r3, #32
 8004110:	d107      	bne.n	8004122 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004112:	f107 030c 	add.w	r3, r7, #12
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe ff78 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004120:	e00f      	b.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8004122:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800412a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800412e:	d105      	bne.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004132:	2b30      	cmp	r3, #48	@ 0x30
 8004134:	d102      	bne.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8004136:	4b08      	ldr	r3, [pc, #32]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800413a:	e002      	b.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8004140:	e003      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004142:	e002      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004148:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800414a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800414c:	4618      	mov	r0, r3
 800414e:	3730      	adds	r7, #48	@ 0x30
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	44020c00 	.word	0x44020c00
 8004158:	02dc6c00 	.word	0x02dc6c00

0800415c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004164:	4b48      	ldr	r3, [pc, #288]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a47      	ldr	r2, [pc, #284]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 800416a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800416e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004170:	f7fc fd46 	bl	8000c00 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004176:	e008      	b.n	800418a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004178:	f7fc fd42 	bl	8000c00 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e07a      	b.n	8004280 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800418a:	4b3f      	ldr	r3, [pc, #252]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004196:	4b3c      	ldr	r3, [pc, #240]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6811      	ldr	r1, [r2, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6852      	ldr	r2, [r2, #4]
 80041aa:	0212      	lsls	r2, r2, #8
 80041ac:	430a      	orrs	r2, r1
 80041ae:	4936      	ldr	r1, [pc, #216]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	025b      	lsls	r3, r3, #9
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	041b      	lsls	r3, r3, #16
 80041d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	3b01      	subs	r3, #1
 80041de:	061b      	lsls	r3, r3, #24
 80041e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80041e4:	4928      	ldr	r1, [pc, #160]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80041ea:	4b27      	ldr	r3, [pc, #156]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ee:	f023 020c 	bic.w	r2, r3, #12
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	4924      	ldr	r1, [pc, #144]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80041fc:	4b22      	ldr	r3, [pc, #136]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004200:	f023 0220 	bic.w	r2, r3, #32
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	491f      	ldr	r1, [pc, #124]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800420e:	4b1e      	ldr	r3, [pc, #120]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 8004210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	491c      	ldr	r1, [pc, #112]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800421c:	4b1a      	ldr	r3, [pc, #104]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004220:	4a19      	ldr	r2, [pc, #100]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 8004222:	f023 0310 	bic.w	r3, r3, #16
 8004226:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004228:	4b17      	ldr	r3, [pc, #92]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004230:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6a12      	ldr	r2, [r2, #32]
 8004238:	00d2      	lsls	r2, r2, #3
 800423a:	4913      	ldr	r1, [pc, #76]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8004240:	4b11      	ldr	r3, [pc, #68]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	4a10      	ldr	r2, [pc, #64]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 8004246:	f043 0310 	orr.w	r3, r3, #16
 800424a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800424c:	4b0e      	ldr	r3, [pc, #56]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a0d      	ldr	r2, [pc, #52]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 8004252:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004256:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004258:	f7fc fcd2 	bl	8000c00 <HAL_GetTick>
 800425c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800425e:	e008      	b.n	8004272 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004260:	f7fc fcce 	bl	8000c00 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e006      	b.n	8004280 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004272:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <RCCEx_PLL2_Config+0x12c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0

}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	44020c00 	.word	0x44020c00

0800428c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e042      	b.n	8004324 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7fc faab 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2224      	movs	r2, #36	@ 0x24
 80042ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa44 	bl	8004764 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f8c3 	bl	8004468 <UART_SetConfig>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e01b      	b.n	8004324 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800430a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fac3 	bl	80048a8 <UART_CheckIdleState>
 8004322:	4603      	mov	r3, r0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	@ 0x28
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004342:	2b20      	cmp	r3, #32
 8004344:	f040 808b 	bne.w	800445e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <HAL_UART_Transmit+0x28>
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e083      	b.n	8004460 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004362:	2b80      	cmp	r3, #128	@ 0x80
 8004364:	d107      	bne.n	8004376 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004374:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2221      	movs	r2, #33	@ 0x21
 8004382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004386:	f7fc fc3b 	bl	8000c00 <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	88fa      	ldrh	r2, [r7, #6]
 8004390:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	88fa      	ldrh	r2, [r7, #6]
 8004398:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a4:	d108      	bne.n	80043b8 <HAL_UART_Transmit+0x8c>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	e003      	b.n	80043c0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043c0:	e030      	b.n	8004424 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	2180      	movs	r1, #128	@ 0x80
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 fb15 	bl	80049fc <UART_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e03d      	b.n	8004460 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10b      	bne.n	8004402 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	3302      	adds	r3, #2
 80043fe:	61bb      	str	r3, [r7, #24]
 8004400:	e007      	b.n	8004412 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	3301      	adds	r3, #1
 8004410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1c8      	bne.n	80043c2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2200      	movs	r2, #0
 8004438:	2140      	movs	r1, #64	@ 0x40
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fade 	bl	80049fc <UART_WaitOnFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e006      	b.n	8004460 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e000      	b.n	8004460 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800445e:	2302      	movs	r3, #2
  }
}
 8004460:	4618      	mov	r0, r3
 8004462:	3720      	adds	r7, #32
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800446c:	b094      	sub	sp, #80	@ 0x50
 800446e:	af00      	add	r7, sp, #0
 8004470:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	431a      	orrs	r2, r3
 8004482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	431a      	orrs	r2, r3
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	4313      	orrs	r3, r2
 800448e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	498a      	ldr	r1, [pc, #552]	@ (80046c0 <UART_SetConfig+0x258>)
 8004498:	4019      	ands	r1, r3
 800449a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044a0:	430b      	orrs	r3, r1
 80044a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b0:	68d9      	ldr	r1, [r3, #12]
 80044b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	ea40 0301 	orr.w	r3, r0, r1
 80044ba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4b7f      	ldr	r3, [pc, #508]	@ (80046c4 <UART_SetConfig+0x25c>)
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d004      	beq.n	80044d6 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ce:	6a1a      	ldr	r2, [r3, #32]
 80044d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d2:	4313      	orrs	r3, r2
 80044d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80044e0:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80044e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ea:	430b      	orrs	r3, r1
 80044ec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	f023 000f 	bic.w	r0, r3, #15
 80044f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80044fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	ea40 0301 	orr.w	r3, r0, r1
 8004504:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b6f      	ldr	r3, [pc, #444]	@ (80046c8 <UART_SetConfig+0x260>)
 800450c:	429a      	cmp	r2, r3
 800450e:	d102      	bne.n	8004516 <UART_SetConfig+0xae>
 8004510:	2301      	movs	r3, #1
 8004512:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004514:	e01a      	b.n	800454c <UART_SetConfig+0xe4>
 8004516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b6c      	ldr	r3, [pc, #432]	@ (80046cc <UART_SetConfig+0x264>)
 800451c:	429a      	cmp	r2, r3
 800451e:	d102      	bne.n	8004526 <UART_SetConfig+0xbe>
 8004520:	2302      	movs	r3, #2
 8004522:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004524:	e012      	b.n	800454c <UART_SetConfig+0xe4>
 8004526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4b69      	ldr	r3, [pc, #420]	@ (80046d0 <UART_SetConfig+0x268>)
 800452c:	429a      	cmp	r2, r3
 800452e:	d102      	bne.n	8004536 <UART_SetConfig+0xce>
 8004530:	2304      	movs	r3, #4
 8004532:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004534:	e00a      	b.n	800454c <UART_SetConfig+0xe4>
 8004536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4b62      	ldr	r3, [pc, #392]	@ (80046c4 <UART_SetConfig+0x25c>)
 800453c:	429a      	cmp	r2, r3
 800453e:	d103      	bne.n	8004548 <UART_SetConfig+0xe0>
 8004540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004546:	e001      	b.n	800454c <UART_SetConfig+0xe4>
 8004548:	2300      	movs	r3, #0
 800454a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	4b5c      	ldr	r3, [pc, #368]	@ (80046c4 <UART_SetConfig+0x25c>)
 8004552:	429a      	cmp	r2, r3
 8004554:	d171      	bne.n	800463a <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004558:	2200      	movs	r2, #0
 800455a:	623b      	str	r3, [r7, #32]
 800455c:	627a      	str	r2, [r7, #36]	@ 0x24
 800455e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004562:	f7fe febd 	bl	80032e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004566:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8004568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80e2 	beq.w	8004734 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	4a57      	ldr	r2, [pc, #348]	@ (80046d4 <UART_SetConfig+0x26c>)
 8004576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800457a:	461a      	mov	r2, r3
 800457c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800457e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004582:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	4413      	add	r3, r2
 800458e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004590:	429a      	cmp	r2, r3
 8004592:	d305      	bcc.n	80045a0 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800459a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800459c:	429a      	cmp	r2, r3
 800459e:	d903      	bls.n	80045a8 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80045a6:	e0c5      	b.n	8004734 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045aa:	2200      	movs	r2, #0
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	61fa      	str	r2, [r7, #28]
 80045b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	4a47      	ldr	r2, [pc, #284]	@ (80046d4 <UART_SetConfig+0x26c>)
 80045b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2200      	movs	r2, #0
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	617a      	str	r2, [r7, #20]
 80045c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80045ca:	f7fb fe6d 	bl	80002a8 <__aeabi_uldivmod>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	020b      	lsls	r3, r1, #8
 80045e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045e4:	0202      	lsls	r2, r0, #8
 80045e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045e8:	6849      	ldr	r1, [r1, #4]
 80045ea:	0849      	lsrs	r1, r1, #1
 80045ec:	2000      	movs	r0, #0
 80045ee:	460c      	mov	r4, r1
 80045f0:	4605      	mov	r5, r0
 80045f2:	eb12 0804 	adds.w	r8, r2, r4
 80045f6:	eb43 0905 	adc.w	r9, r3, r5
 80045fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	60fa      	str	r2, [r7, #12]
 8004604:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004608:	4640      	mov	r0, r8
 800460a:	4649      	mov	r1, r9
 800460c:	f7fb fe4c 	bl	80002a8 <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4613      	mov	r3, r2
 8004616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800461a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800461e:	d308      	bcc.n	8004632 <UART_SetConfig+0x1ca>
 8004620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004626:	d204      	bcs.n	8004632 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8004628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800462e:	60da      	str	r2, [r3, #12]
 8004630:	e080      	b.n	8004734 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004638:	e07c      	b.n	8004734 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800463a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004642:	d149      	bne.n	80046d8 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004646:	2200      	movs	r2, #0
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004650:	f7fe fe46 	bl	80032e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004654:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d06b      	beq.n	8004734 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800465c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	4a1c      	ldr	r2, [pc, #112]	@ (80046d4 <UART_SetConfig+0x26c>)
 8004662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004666:	461a      	mov	r2, r3
 8004668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800466a:	fbb3 f3f2 	udiv	r3, r3, r2
 800466e:	005a      	lsls	r2, r3, #1
 8004670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	441a      	add	r2, r3
 8004678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004684:	2b0f      	cmp	r3, #15
 8004686:	d916      	bls.n	80046b6 <UART_SetConfig+0x24e>
 8004688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800468a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800468e:	d212      	bcs.n	80046b6 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004692:	b29b      	uxth	r3, r3
 8004694:	f023 030f 	bic.w	r3, r3, #15
 8004698:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800469a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80046a8:	4313      	orrs	r3, r2
 80046aa:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80046ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80046b2:	60da      	str	r2, [r3, #12]
 80046b4:	e03e      	b.n	8004734 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80046bc:	e03a      	b.n	8004734 <UART_SetConfig+0x2cc>
 80046be:	bf00      	nop
 80046c0:	cfff69f3 	.word	0xcfff69f3
 80046c4:	44002400 	.word	0x44002400
 80046c8:	40013800 	.word	0x40013800
 80046cc:	40004400 	.word	0x40004400
 80046d0:	40004800 	.word	0x40004800
 80046d4:	08004e40 	.word	0x08004e40
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80046d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046da:	2200      	movs	r2, #0
 80046dc:	469a      	mov	sl, r3
 80046de:	4693      	mov	fp, r2
 80046e0:	4650      	mov	r0, sl
 80046e2:	4659      	mov	r1, fp
 80046e4:	f7fe fdfc 	bl	80032e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80046e8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80046ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d021      	beq.n	8004734 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004760 <UART_SetConfig+0x2f8>)
 80046f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046fa:	461a      	mov	r2, r3
 80046fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	441a      	add	r2, r3
 800470a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004716:	2b0f      	cmp	r3, #15
 8004718:	d909      	bls.n	800472e <UART_SetConfig+0x2c6>
 800471a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004720:	d205      	bcs.n	800472e <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004724:	b29a      	uxth	r2, r3
 8004726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60da      	str	r2, [r3, #12]
 800472c:	e002      	b.n	8004734 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004736:	2201      	movs	r2, #1
 8004738:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800473c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473e:	2201      	movs	r2, #1
 8004740:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004746:	2200      	movs	r2, #0
 8004748:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800474a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800474c:	2200      	movs	r2, #0
 800474e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004750:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8004754:	4618      	mov	r0, r3
 8004756:	3750      	adds	r7, #80	@ 0x50
 8004758:	46bd      	mov	sp, r7
 800475a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800475e:	bf00      	nop
 8004760:	08004e40 	.word	0x08004e40

08004764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01a      	beq.n	800487a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004862:	d10a      	bne.n	800487a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]
  }
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b098      	sub	sp, #96	@ 0x60
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048b8:	f7fc f9a2 	bl	8000c00 <HAL_GetTick>
 80048bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d12f      	bne.n	800492c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d4:	2200      	movs	r2, #0
 80048d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f88e 	bl	80049fc <UART_WaitOnFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d022      	beq.n	800492c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004904:	647b      	str	r3, [r7, #68]	@ 0x44
 8004906:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800490a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e6      	bne.n	80048e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e063      	b.n	80049f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b04      	cmp	r3, #4
 8004938:	d149      	bne.n	80049ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800493a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004942:	2200      	movs	r2, #0
 8004944:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f857 	bl	80049fc <UART_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d03c      	beq.n	80049ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	623b      	str	r3, [r7, #32]
   return(result);
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004972:	633b      	str	r3, [r7, #48]	@ 0x30
 8004974:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e6      	bne.n	8004954 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3308      	adds	r3, #8
 800498c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	60fb      	str	r3, [r7, #12]
   return(result);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3308      	adds	r3, #8
 80049a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049a6:	61fa      	str	r2, [r7, #28]
 80049a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	69b9      	ldr	r1, [r7, #24]
 80049ac:	69fa      	ldr	r2, [r7, #28]
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	617b      	str	r3, [r7, #20]
   return(result);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e5      	bne.n	8004986 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2220      	movs	r2, #32
 80049be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e012      	b.n	80049f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3758      	adds	r7, #88	@ 0x58
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0c:	e04f      	b.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d04b      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7fc f8f3 	bl	8000c00 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e04e      	b.n	8004ace <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d037      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b80      	cmp	r3, #128	@ 0x80
 8004a42:	d034      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b40      	cmp	r3, #64	@ 0x40
 8004a48:	d031      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d110      	bne.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f838 	bl	8004ad6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2208      	movs	r2, #8
 8004a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e029      	b.n	8004ace <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a88:	d111      	bne.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f81e 	bl	8004ad6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e00f      	b.n	8004ace <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d0a0      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b095      	sub	sp, #84	@ 0x54
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004afc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004afe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e6      	bne.n	8004ade <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3308      	adds	r3, #8
 8004b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	f023 0301 	bic.w	r3, r3, #1
 8004b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e3      	bne.n	8004b10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d118      	bne.n	8004b82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f023 0310 	bic.w	r3, r3, #16
 8004b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	6979      	ldr	r1, [r7, #20]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	e841 2300 	strex	r3, r2, [r1]
 8004b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1e6      	bne.n	8004b50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004b96:	bf00      	nop
 8004b98:	3754      	adds	r7, #84	@ 0x54
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UARTEx_DisableFifoMode+0x16>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e027      	b.n	8004c08 <HAL_UARTEx_DisableFifoMode+0x66>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2224      	movs	r2, #36	@ 0x24
 8004bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0201 	bic.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004be6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e02d      	b.n	8004c88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2224      	movs	r2, #36	@ 0x24
 8004c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f84f 	bl	8004d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e02d      	b.n	8004d04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2224      	movs	r2, #36	@ 0x24
 8004cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0201 	bic.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f811 	bl	8004d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d108      	bne.n	8004d2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d2c:	e031      	b.n	8004d92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d2e:	2308      	movs	r3, #8
 8004d30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d32:	2308      	movs	r3, #8
 8004d34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	0e5b      	lsrs	r3, r3, #25
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	0f5b      	lsrs	r3, r3, #29
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d56:	7bbb      	ldrb	r3, [r7, #14]
 8004d58:	7b3a      	ldrb	r2, [r7, #12]
 8004d5a:	4911      	ldr	r1, [pc, #68]	@ (8004da0 <UARTEx_SetNbDataToProcess+0x94>)
 8004d5c:	5c8a      	ldrb	r2, [r1, r2]
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d62:	7b3a      	ldrb	r2, [r7, #12]
 8004d64:	490f      	ldr	r1, [pc, #60]	@ (8004da4 <UARTEx_SetNbDataToProcess+0x98>)
 8004d66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d68:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	7b7a      	ldrb	r2, [r7, #13]
 8004d78:	4909      	ldr	r1, [pc, #36]	@ (8004da0 <UARTEx_SetNbDataToProcess+0x94>)
 8004d7a:	5c8a      	ldrb	r2, [r1, r2]
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d80:	7b7a      	ldrb	r2, [r7, #13]
 8004d82:	4908      	ldr	r1, [pc, #32]	@ (8004da4 <UARTEx_SetNbDataToProcess+0x98>)
 8004d84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d86:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	08004e58 	.word	0x08004e58
 8004da4:	08004e60 	.word	0x08004e60

08004da8 <memset>:
 8004da8:	4402      	add	r2, r0
 8004daa:	4603      	mov	r3, r0
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d100      	bne.n	8004db2 <memset+0xa>
 8004db0:	4770      	bx	lr
 8004db2:	f803 1b01 	strb.w	r1, [r3], #1
 8004db6:	e7f9      	b.n	8004dac <memset+0x4>

08004db8 <__libc_init_array>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	4d0d      	ldr	r5, [pc, #52]	@ (8004df0 <__libc_init_array+0x38>)
 8004dbc:	2600      	movs	r6, #0
 8004dbe:	4c0d      	ldr	r4, [pc, #52]	@ (8004df4 <__libc_init_array+0x3c>)
 8004dc0:	1b64      	subs	r4, r4, r5
 8004dc2:	10a4      	asrs	r4, r4, #2
 8004dc4:	42a6      	cmp	r6, r4
 8004dc6:	d109      	bne.n	8004ddc <__libc_init_array+0x24>
 8004dc8:	4d0b      	ldr	r5, [pc, #44]	@ (8004df8 <__libc_init_array+0x40>)
 8004dca:	2600      	movs	r6, #0
 8004dcc:	4c0b      	ldr	r4, [pc, #44]	@ (8004dfc <__libc_init_array+0x44>)
 8004dce:	f000 f817 	bl	8004e00 <_init>
 8004dd2:	1b64      	subs	r4, r4, r5
 8004dd4:	10a4      	asrs	r4, r4, #2
 8004dd6:	42a6      	cmp	r6, r4
 8004dd8:	d105      	bne.n	8004de6 <__libc_init_array+0x2e>
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de0:	3601      	adds	r6, #1
 8004de2:	4798      	blx	r3
 8004de4:	e7ee      	b.n	8004dc4 <__libc_init_array+0xc>
 8004de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dea:	3601      	adds	r6, #1
 8004dec:	4798      	blx	r3
 8004dee:	e7f2      	b.n	8004dd6 <__libc_init_array+0x1e>
 8004df0:	08004e70 	.word	0x08004e70
 8004df4:	08004e70 	.word	0x08004e70
 8004df8:	08004e70 	.word	0x08004e70
 8004dfc:	08004e74 	.word	0x08004e74

08004e00 <_init>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr

08004e0c <_fini>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr
